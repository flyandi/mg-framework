/**  * (mg)framework Version 5.0  *	Copyright (c) 1999-2011 eikonlexis LLC. All rights reserved.  *  * This program is protected by copyright laws and international treaties.  * Unauthorized reproduction or distribution of this program, or any   * portion thereof, may result in serious civil and criminal penalties.  *  * Module 		Resource Script Library (JavaScript)  *//** (mgCreateResourceScript) creates a script from a resource */var mgCreateResourceScript = function(buffer, data) {	try {		// parse buffer		var buffer = $.base64.decode(buffer);		// parse script into local context		eval(buffer);		// test object		if(typeof(mgResourceScript)=="object") {			return mgResourceScript;		}	} catch(e) {		var err = e.constructor(sprintf('%s: %s', data?data.name:'Global', e.message));		mgCreateErrorDialog(data?{			message: err.message,			fileName: data.filename,			lineNumber: (e.lineNumber - err.lineNumber) + 3,			columnNumber: e.columnNumber?e.columnNumber:0,			stack: buffer		}:e);	}	// return false	return false;};/**  * (mgCreateResourceScriptHandler)  */ var mgCreateResourceScriptHandler = function(script, settings) {	// set settings	var settings = $.extend({}, {manager: false, callback: false, callbackid: false, callbackurl: false}, settings);	// create handler	var app = mgCreateResourceScript(script);	// verify	if(app) {		// -------------------------------------------------------------------		// Assign Variables		app.manager = settings.manager;		app.settings = settings;		// -------------------------------------------------------------------		// Assign Functions		/** (getcallbackurl) */		app.getcallbackurl = function(action, apicall) {			return this.settings.callbackurl?sprintf("%s/%s", this.settings.callbackurl, action):sprintf("%s%s/%s", apicall?"":API_URL+"/", this.settings.callback, action);					}				/** (call) */		app.call = function(action, data, raw, showerror) {			return API.call(this.getcallbackurl(action, true), data, raw, showerror);		}		/** (readfile) */		app.readfile = function(f) {			return this.call('readfile', {filename: f}, true);		}				/** (has) */		app.has = function(n) {			return typeof(this[n])=="function";		}						// initialize		if(app.has("initialize")){			app.initialize();		}	}	// return app	return app;};