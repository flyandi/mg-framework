/**  * (mg)framework Version 5.0  *	Copyright (c) 1999-2011 eikonlexis LLC. All rights reserved.  *  * This program is protected by copyright laws and international treaties.  * Unauthorized reproduction or distribution of this program, or any   * portion thereof, may result in serious civil and criminal penalties.  *  * Module 		File Handling Library (JavaScript)  *//** (initialize) */    if (typeof XMLHttpRequest == "undefined")  XMLHttpRequest = function () {    try { return new ActiveXObject("Msxml2.XMLHTTP.6.0"); }      catch (e) {}    try { return new ActiveXObject("Msxml2.XMLHTTP.3.0"); }      catch (e) {}    try { return new ActiveXObject("Microsoft.XMLHTTP"); }      catch (e) {}    //Microsoft.XMLHTTP points to Msxml2.XMLHTTP and is redundant    throw new Error("This browser does not support XMLHttpRequest."); };  /** (function) mgBase64FileData */   var mgBase64FileData = function(data) {		// parse data	var parts = data.split(";");	// check parts	if(parts.length==2) {		// split data		var dt = parts[1].split(",");		// check dt		if(dt.length==2) {			// initialize			var c = false;			// decode data			switch(dt[0].toLowerCase()) {				case "base64": 					var c = $.base64.decode(dt[1]);					break;			}			// check result			if(c) {				// return data				return {					mime: parts[0],					data: c				};			}		}	}	// return error	return false;};  /** (function) mgUploadBase64File */  var mgUploadBase64File = function(url, name, data, events) {	// initialize events	var events = $.extend({}, {onprogress: false, oncomplete: false, onerror: false}, events);	// initialize 	var xhr  = new XMLHttpRequest();	// assign progress event	if(typeof(events.onprogress)=="function") {		xhr.upload.addEventListener("progress", function(ev) {			if (ev.lengthComputable) {				// calculate 				events.onprogress(ev.loaded, ev.total);			}		}, false);	}	// assign complete event	if(typeof(events.oncomplete)=="function") {		xhr.upload.addEventListener("load", function(ev) {			events.oncomplete(xhr.responseText, ev);		}, false);	}	// assign error event	if(typeof(events.onerror)=="function") {		xhr.upload.addEventListener("error", events.onerror, false);	}	// open path				xhr.open("POST", url, true);	// create content	var boundary = '------multipartformboundary' + (new Date).getTime(),		dashdash = '--',		crlf = '\r\n',		content = dashdash+boundary+crlf+'Content-Disposition: form-data; name="'+name+'";"'+crlf+crlf+data+crlf+dashdash+boundary+dashdash+crlf;	// send headers	xhr.setRequestHeader("Content-type", "multipart/form-data; boundary="+boundary);	xhr.setRequestHeader("Content-length", content.length);	xhr.setRequestHeader("Connection", "close");	// execute	xhr.send(content);};/** (function) mgCreateProgressBar */var mgCreateProgressBar = function(target, settings) {	// initialize progressbar	var pb = {		// settings		settings: $.extend({}, {width: false, inset: false, min: 0, max: 100, step: 1}, settings),		// initialize		initialize: function() {			// prepare			if(!this.settings.width) {this.settings.width = target.width();}			// prepare components			this.pbar = $("<div></div>").addClass("-progressbar -corner-all").css({width: this.settings.width}).css("margin-left", this.settings.inset).appendTo(target);			this.pbar_inner = $("<div></div>").addClass("-inner -corner-all").appendTo(this.pbar);		},		remove: function() {			this.destroy();		},		// destroy		destroy: function() {			this.pbar.remove();			this.pbar_inner.remove();		},		// position, sets the progress bar to position		position: function(p) {			// calculate 			var x = Math.round((this.settings.width * p) / this.settings.max) - 2;			// sanity check			x = x<0?0:x>this.settings.width?this.settings.width-2:x;			// set width			this.pbar_inner.css("width", x);		}			};	pb.initialize();	return pb;};/** (mgLoadCSS) */  var mgLoadCSS = function(url) {	if (document.createStyleSheet){		document.createStyleSheet(url);	} else {		$("head").append(sprintf("<link rel='stylesheet' href='%s' type='text/css'/>", url));	}};/** (mgLoadJavaScript) */  var mgLoadJavaScript = function(url, callback) {	$.ajax({		async: typeof(callback)=="function"?true:false,		type:'GET',		url: url,		success:callback,		dataType:'script',	});};