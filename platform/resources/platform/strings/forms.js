/**  * (mg)framework Version 5.0  *	Copyright (c) 1999-2011 eikonlexis LLC. All rights reserved.  *  * This program is protected by copyright laws and international treaties.  * Unauthorized reproduction or distribution of this program, or any   * portion thereof, may result in serious civil and criminal penalties.  *  * Module 		Forms Library (JavaScript)  */  /** (mgGetFormValues)  */    var mgGetFormValues = function(form, settings){	// get settings	var settings = $.extend({}, {key: 'name', value: false, elements: false}, settings);	// result	var result = {};	// execute form values	$(form).find(sprintf("%s[%s]", settings.elements?settings.elements:"", settings.key)).each(function() {		var value = "";		if($(this).hasClass("multi-div")) {					value = $(this).trigger('mdupdate').data("values");		} else if (!$(this).hasClass("-isdefault")) {			value = settings.value?$(this).attr(settings.value):$(this).val();		}		result[$(this).attr(settings.key)] = value;	});	// return 	return result;};jQuery.fn.mgGetFormValues = function(callback, settings) {return this.each(function(){if(typeof(callback)=="function"){callback(mgGetFormValues($(this), settings))}})};/** (mgSetFormValues)  */    var mgSetFormValues = function(form, data, settings){	var settings = $.extend({}, {key: 'name', value: false, elements: false}, settings);	// execute form values	$.each(data, function(name, value) {		try {			var t = $(form).find(sprintf("[%s=%s]", settings.key, name));			if(t.hasClass("multi-div")) {				t.trigger('mdsetvalue', [value]);			} else if(!settings.value || settings.value == "value") {				t.val(value);			} else {					t.attr(settings.value, value);			}			t.removeClass('-isdefault');		} catch(e) {				}	});};jQuery.fn.mgSetFormValues = function(data, settings) {return this.each(function(){return mgSetFormValues($(this), data, settings)})};/** (mgFormUISubmit) */var mgFormUISubmit = function(settings) {	var settings = $.extend({}, {form: false, submit: false, text: false}, settings),		target = $(settings.form);	if(target.length!=0) {		target.find("[name]").each(function() {			$(this).attr("disabled", "true");		});		target.find(settings.submit).parent().html($("<div></div>").addClass("-submittext").append(settings.text));	}};/** (mgFormSelectContent) */var mgFormSelectContent = function(target, settings) {	var settings = $.extend({}, {value: false, keyindex: false, keyname: false, valuename: false, allowempty: false, source: false, selectlabel: '{%ComboSelectMessage}'}, settings);	$(target).html("");	if(settings.allowempty) {$(target).append(sprintf("<option value=''>%s</option>", settings.selectlabel));}	$.each(settings.source, function(key, value) {		if((settings.keyindex||settings.keyname) && settings.valuename) {			var item = value, key = settings.keyindex?key:item[settings.keyname], value = item[settings.valuename];		}		$(target).append($("<option></option>").attr("value", key).append(value));	});	if(settings.value&&$(target).find("option[value="+settings.value+"]").length!=0) {		$(target).val(settings.value);	} else if(settings.allowempty){	}};jQuery.fn.mgFormSelectContent = function(settings) {return this.each(function(){mgFormSelectContent($(this), settings)})};/** (mgFormDefaults) */var mgFormDefaults = function(target) {	if(!target) var target = $("body");	target.find("[default]").each(function() {		if(!$(this).data("hasdefault")) {			$(this).bind({				focus: function() {					if($(this).hasClass("-isdefault")) {						$(this).removeClass("-isdefault").val("");					}				},				blur: function() {					var v = $.trim($(this).val());					if(v.length==0||v==$(this).attr("default")) {						$(this).val($(this).attr("default")).addClass("-isdefault");					}				},				change: function() {					if($(this).val()!=$(this).attr("default")) {						$(this).removeClass("-isdefault");					}				}			}).data("hasdefault", true).blur();					}	});};/** (mgFormMultiDivSetup) */var mgFormMultiDivSetup = function(target, data) {	$(target).find(".multi-div").each(function() {		if(!$(this).data("hasmv")) {			var local = $(this);			local.data({				hasmv: true,				limit: local.attr("limit")?local.attr("limit"):10,				inner: local.html()			}).html("").bind({				mdadd: function() {					var html = $(this).data("inner");					$(this).find(".multi-div-add").before(html);					$(this).trigger('mdupdate');				},				mdaddmore: function() {					var target = $(this);					target.append($("<div></div>").addClass("multi-div-add").append("Add another").click(function(){						target.trigger('mdadd');					}));					if(target.find(".cluster").length==0) {						target.trigger('mdadd');					}				},				mdsetvalue: function(ev, values) {					var target = $(this), inner = target.data("inner"), primary = $(inner).find("[rel]:first").attr("rel");					target.html("");										$.each(values, function(index, item) {						var hasvalue = false;						$.each(item, function(key, vi) {							vi = $.trim(vi);							if(vi&&vi.length!=0&&vi!="") {								hasvalue = true;								return true;							}						});						if(hasvalue) {							var html = $($(inner).clone());							$.each(item, function(key, vi) {								html.find(sprintf("[rel=%s]", key)).val(vi); //("init", vi);							});							if(target.find(".multi-div-add").length!=0) {								target.find(".multi-div-add").before(html);							} else {								target.append(html);							}						}					});					if(target.find(".cluster").length<target.data("limit")) {						target.trigger('mdaddmore');					}					$(this).trigger('mdupdate');					mgFormDefaults();				},				mdupdate: function() {					var values = [], limit = $(this).data("limit");					$(this).find(".cluster").each(function() {						var item = {};						$(this).find("[rel]").each(function() {							var v = $.trim($(this).val());							if($(this).hasClass("-isdefault")) v = '';							if(v.length!=0&&v!="") {								item[$(this).attr("rel")] = v;							}						});						if(mgObjectCount(item)!=0) {							values.push(item);						}					});					if(values.length>=limit) {						$(this).find(".multi-div-add").remove();					}					$(this).data("values", values);				}			}).trigger('mdaddmore');		}	});};