/**  * (mg)framework Version 5.0  *	Copyright (c) 1999-2011 eikonlexis LLC. All rights reserved.  *  * This program is protected by copyright laws and international treaties.  * Unauthorized reproduction or distribution of this program, or any   * portion thereof, may result in serious civil and criminal penalties.  *  * Module 		Object Library (JavaScript)  */  /** (mgIsObject) */var mgIsObject = function(o) {	return typeof(o)=="object";};  /** (mgObjectReduceKeyString)  */  var mgObjectReduceKeyString = function(o, reduce) {	var result = {};	$.each(o, function(key, value) {			if(mgCompareLeftString(reduce, key)) {			key = key.replace(reduce, "");		}		result[key] = value;	});	return result;};  /** (mgSearchJSON)  */    var mgSearchJSON = function(json, key, returnBool, returnIndex, returnObject){	var hits = 0, ix = -1;	if(returnObject) returnIndex = true;	$.each(json, function(index, params){		var b = false;		switch(typeof(key)) {			case "object": b = (params[key[0]]==key[1]);b=key[2]?(b!=""?true:false):b; break;			case "string": b = (params[key]); break;		}		if (b){hits+=1;if(returnIndex){ix = index; return;}}	});	if(returnObject && ix != -1) {		return json[ix];	} else {		return returnIndex?ix:(returnBool?(hits!=0):hits);	}}; /** (mgCreateObjectArray)  */    var mgCreateObjectArray = function(a, f) {	var r = {};	$.each(a, function(index, v) {		r[v] = typeof(f)=="function"?f(v):v;	});	return r;};/** (mgCreateObjectArray)  */    var mgCreateArrayFromObject = function(o, usevalue) {	var a = [];	$.each(o, function(name, value) {		a.push(usevalue?value:name);	});	return a;};/** (mgConvertMultiObjectArrayToSingle)  */    var mgConvertMultiObjectArrayToSingle = function(o, f) {	var a = {}	$.each(o, function(index, params) {		var c = f(params);		a[c[0]] = c[1];	});	return a;};/** (mgFormatObjectArray)  */var mgFormatObjectArray = function(a, f, q) {	var r = {};	$.each(a, function(i, p) {		$.each(f, function(k, v) {			if(p[k]) {				r[p[k]] = (typeof(v)=="function")?v(p):(p[v]?p[v]:v);			}		});	});	return r;};/** (mgRemoveValuesFromObject)  */  var mgRemoveValuesFromObject = function(o) {	$.each(o, function(name, value) {		o[name] = "";	});	return o;};  /** (mgSortObject) sorts an JSON object by key */var mgSortObject = function(o, f) {	var sorted = {},		key, a = [];    for (key in o) {        if (o.hasOwnProperty(key)) {                a.push(key);        }    }    a.sort(typeof(f)=="function"?f:null);    for (key = 0; key < a.length; key++) {        sorted[a[key]] = o[a[key]];    }    return sorted;};/** (mgSortByLetter) custom sorts function */var mgSortByLetter = function(a, b) {	if(a.toLowerCase() !== b.toLowerCase()) {        a = a.toLowerCase();        b = b.toLowerCase();    }    return a > b ? 1 : (a < b ? -1 : 0);};/** (mgSortObjectArray) sorts an JSON object by key up/down */  var mgSortObjectArray  = function(o, sortkey, sortdesc) {	if(sortkey.length != 0) {		o.sort(function(a, b) {			var a = (a[sortkey]).toString(), b = (b[sortkey]).toString();			if(a.toLowerCase() !== b.toLowerCase()) {				a = a.toLowerCase();				b = b.toLowerCase();			}			if(!sortdesc) {				return a > b ? -1 : (a < b ? 1 : 0);				} else {				return a > b ? 1 : (a < b ? -1 : 0);			}		});	}	return o;};/** mgObjectCount */var mgObjectCount = function(o) {	var r = 0;	for(a in o) r++;	return r;};/** mgEmptyObject */var mgEmptyObject = function(o) {	if(typeof(o)=="object") {		if(typeof(o.length)!="undefined") {			return o.length==0?true:false;		} else {			return mgObjectCount(o)==0?true:false;		}	}	return true;};/** mgPrepareObjectForTransfer */var mgPrepareObjectForTransfer = function(o, r, k) {	if(!k) var k = 0;	if(k == 5) return o;	$.each(o, function(n, v) {		switch(true) {			case mgIsArray(v):				if(v.length==0) {					o[n] = r;				}				break;			case mgIsObject(v): 				if(mgObjectCount(v) == 0) {					o[n] = r; 				} else {					o[n] = mgPrepareObjectForTransfer(o[n], r, k+1);				}				break;		}	});	return o;};