/**  * (mg)framework Version 5.0  *	Copyright (c) 1999-2011 eikonlexis LLC. All rights reserved.  *  * This program is protected by copyright laws and international treaties.  * Unauthorized reproduction or distribution of this program, or any   * portion thereof, may result in serious civil and criminal penalties.  *  * Module 		Color Library (JavaScript)  *  */  /** (mgRGBToHex), Converts a CSS RGB String to Hex */var mgRGBToHex = function(color) {	if(typeof(color)=="undefined") {return "#000000";}	// text against RGB	if(typeof(color)!="string"){var color = color.toString();}	if(color.substring(0,3)=="rgb") {		var digits = /(.*?)rgb\((\d+), (\d+), (\d+)\)/.exec(color),			red = parseInt(digits[2]),			green = parseInt(digits[3]),			blue = parseInt(digits[4]),			rgb = blue | (green << 8) | (red << 16);			color = digits[1] + '#' + rgb.toString(16);	}	return color.toUpperCase();};/** (mgLightenColor), lightens a color */var mgLightenColor = function(hex, percentage, shiftdown) {	// initialize result	var result = "";	// test against RGB and Hex	if(hex.substring(0, 3)=="rgb") {		var rgb = hex.replace("rgb(", "");		rgb = rgb.replace(")", "");		var arr = rgb.split(",");		for(var i=0;i<arr.length;i++){arr[i]=parseInt(arr[i])}	} else {		// prepare string		var hex = hex.substring(1, 7);		// split in rgb values		var arr = [			parseInt(hex.substring(0, 2), 16),			parseInt(hex.substring(2, 4), 16),			parseInt(hex.substring(4, 6), 16)		];	}	// cycle array	$.each(arr, function(i,v) {		// shift		if(shiftdown) {			var amount = v-Math.round((v/100)*percentage); 		} else {			var amount = Math.round(((255-v)/100)*percentage)+v;		}		// add hex		var hx = amount.toString(16);		// add amount		result +=  hx.length<2?'0'+hx:hx;	});	// return result	return "#"+result;};