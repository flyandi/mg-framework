/**  * (mg)framework Version 5.0  *	Copyright (c) 1999-2011 eikonlexis LLC. All rights reserved.  *  * This program is protected by copyright laws and international treaties.  * Unauthorized reproduction or distribution of this program, or any   * portion thereof, may result in serious civil and criminal penalties.  *  * Module 		Manager Class  */  /**  * (constants)  */  var MANAGER_LISTINGS = 0,	MANAGER_BAR_ACTION = 'action',	MANAGER_BAR_HEADER = 'header',	MANAGER_BAR_VIEW = 'view',	MANAGER_BAR_DIVIDER = 'divider';	var MANAGER_CALLBACK = "manager/";	  /**  * (mgCreateManager)  * Creates basic layout and window manager for window  */ var mgCreateManager = (function(){	function mgCreateManager(settings) {		this.settings = $.extend({}, {modules: false, target:false, width: $(window).width(), events: {onaction: function(){}}}, settings);		this.__initialize();	};	mgCreateManager.prototype = {		storages: {},		blocker: false,		barwidth: 180,		values: {},				/* (initialize) */		__initialize: function() {			// initialize manager			this.__manager = $("<div></div>").css({width: this.settings.width}).addClass("-manager -manager-defaultfont -corner-all").appendTo(this.settings.target);			// initialize content sections			this.__side = $("<div></div>").addClass("-manager-bar -corner-left").appendTo(this.__manager);			this.__bar = $("<ul></ul>").css({width: this.barwidth}).appendTo(this.__side);			this.__content = $("<div></div>").addClass("-manager-content").css({width: this.settings.width - this.barwidth - 80}).appendTo(this.__manager);			// add clear 			this.__manager.append(mgClear());			// add modules			this.__initializemodules();			// events			if(typeof(mgManagerAfter)=="function") {				mgManagerAfter(this);			}		},				// set data		__initializemodules: function() {			if(typeof(this.settings.modules)=="object") {				// build bar				var bar = [], views = [], that = this;				// cycle modules				$.each(this.settings.modules, function(index, module) {					if(module.moduleactions) {						bar = bar.concat(module.moduleactions);					}					if(module.moduleviews) {						views = views.concat(module.moduleviews);					}					// initialize module					that.__processaction(module.moduleid, false, true);				});				// update bar				this.__updatebar(bar, views);			}		},				/* (__getmodule) returns the module */		__getmodule: function(id) {			var result = false;			$.each(this.settings.modules, function(index, module) {				if(module.moduleid == id) { 					result = module;					return true;				}			});			return result;		},				/* (__action) exectues a action */		__action: function(v, element) {			// highlight item			$(element).parent().find(".selected").removeClass("selected");			$(element).addClass("selected");					// exeute action			switch(typeof(v)) {				case "function": 					return v(); break;				case "object": 					return this.__processaction(v[0], v[1]); break;				default:					this.settings.events.onaction(v); break;			}		},				/* (updatebar), updates the manager bar */		__updatebar: function(items, views) {			var that = this;			// initialize views			this.__views = views;			// initialize groups			var groups = [];			// reset bar			that.__bar.html("");			// loop items while processing view first			$.each(views.concat(items), function(x, params) {				// create params				var params = $.extend({}, {id: false, targetview: false, index: false, icon: false, type: false, level: true, label: false, action: false, line: false}, params);				// create item				var item = $("<li></li>").disableSelection();				// switch by type				switch(params.type) {					case MANAGER_BAR_ACTION: 							// add action						item.addClass("action -corner-all-small").attr(params.id?{id:params.id}:{}).attr("index", params.index!=false?params.index:1000).addClass(!params.level&&!params.targetview?"nolevel":"").css({cursor:'pointer'}).append(params.label).bind('click touchend', function(){that.__action(params.action, this)}); 						break;					case MANAGER_BAR_VIEW:						item.addClass("header").append(params.label).attr({view:params.name});						break;										case MANAGER_BAR_HEADER:						item.addClass("header").append(params.label); 						break;					case MANAGER_BAR_DIVIDER:						item.addClass("divider").addClass(params.line?"line":"");						break;				}								// check for icon				if(params.icon) {					item.mgIconize(params.icon, {position:'absolute',left:-20, top:4});				}				// verify view and add item				if(params.targetview) {					// add view					that.__bar.find(sprintf("[view=%s]", params.targetview)).after(item.attr({relview: params.targetview}));					// add group					if(groups.indexOf(params.targetview)== -1) {						groups.push(params.targetview);					}				} else {					that.__bar.append(item);				}			});			// sort views			$.each(groups, function(index, gn) {				// sort element				$(sprintf("[relview=%s]", gn)).sortElements(function(a, b){					return $(a).attr("index") < $(b).attr("index") ? -1 : 1;				});			});		},				/* processaction */		__processaction: function(id, action, init, vd, cm) {			var that = this;			// get module			var module = this.__getmodule(id);			// sanity check			if(module) {				var app = mgCreateResourceScript(module.modulescript);				// verify				if(app) {					// -------------------------------------------------------------------					// Assign Variables					app.manager = this;					app.module = module;					// -------------------------------------------------------------------					// Assign Functions					/** (getcallbackurl) */					app.getcallbackurl = function(action, apicall) {						return sprintf("%s%s%s/%s", apicall?"":API_URL+"/", MANAGER_CALLBACK, this.module.moduleid, action);					}					/** (call) */					app.call = function(action, data, raw, showerror) {						return API.call(this.getcallbackurl(action, true), data, raw, showerror);					}					/** (returncontent) */					app.returncontent = function(fields, values, success) {						return this.manager.update(fields, values, success);					}										/** (setvalues) */					app.setvalues = function(values) {						this.manager.values = values;					}										/** (readfile) */					app.readfile = function(f) {						return this.call('readfile', {filename: f}, true);					}										/** (asset access) */					app.getasset = function(settings) {						var settings = $.extend({}, {user: false, imagesonly: true, allow: {images: true, videos: true, documents: true}}, settings)					}										/** (overide) */					app.override = function() {						that.__content = $(that.settings.target);						that.__content.html("");					}										/** (callmodule) */					app.callmodule = function(mid, fn, v) {						var r = that.__processaction(mid, fn, false, v, true), result = [];						if(typeof(r)=="object") {							if(!mgIsArray(r)) {								result.push(r);							} else {								result = r;							}						};						return result;					}					// initialize					if(typeof(app.initialize)=="function"){						app.initialize();					}										// run					if(cm) {						if(typeof(app[action])=="function") {							return app[action](vd?vd:{});						} else {							return app.process(action, vd?vd:{});						}					} else if(init) {						if(typeof(app.init)=="function") {							app.init();						}					} else {						return app.process(action, vd?vd:{});					}				}			}			// return error			return false;		},				/** update, updates the content area */		update: function(content, values, success) {			var that = this;			// reset and destroy content			this.__content.triggerHandlers('destroycontrol').html("");			// initialize values			if(this.values!=null) {				this.values = values?values:{};			}			// add content			switch(typeof(content)) {				case "string":	this.__content.append(content); break;				case "object":	this.__content.append(mgCreateDialogFields(content, {					padding: 0,					parentwidth: this.__content.width(), 					parentheight: 'auto',					onwritestorage: function(name, value) {						that.values[name] = value;					},					onreadstorage: function(name) {						return that.values[name]?that.values[name]:null;					}				}));				break;			}			// execute handler			this.__content.triggerHandlers('after');			// notify success			if(typeof(success)=="function") {				success();			}		}	}	return mgCreateManager;})();