/**  * (mg)framework Version 5.0  *	Copyright (c) 1999-2011 eikonlexis LLC. All rights reserved.  *  * This program is protected by copyright laws and international treaties.  * Unauthorized reproduction or distribution of this program, or any   * portion thereof, may result in serious civil and criminal penalties.  *  * Module 		Dialog Controls Standard Library  */  /**  * (mgDialogFieldController)  * Container for field controls, extendable */ function mgDialogFieldController(parentoptions) {	this.parentoptions = parentoptions;};mgDialogFieldController.prototype = {	// (callcontrol)	callcontrol: function(cname, params, index) {		return mgDialogFieldControls.callcontrol(this, cname, params, index);	},		// (writestorage)	writestorage: function(name, value) {		if(typeof(this.parentoptions.onwritestorage)=="function"){			this.parentoptions.onwritestorage(name, value);		}	},		// (readstorage)	readstorage: function(name) {		if(typeof(this.parentoptions.onreadstorage)=="function"){			return this.parentoptions.onreadstorage(name);		}		return "";	},		// (formatstring)	formatstring: function(s) {		var that = this, d = s.match(/%(.*?)%/g)		if(d) {			$.each(d, function(i, d) {				var n = d.replace(/%/g, ""), hasc = n.substr(0, 1)=="(";				if(hasc) { n = n.replace("(", "");n = n.replace(")", "");}				var v = that.readstorage(n);				if(hasc) { v = "("+v+")"; }				s = s.replace(d, v);			});		}		return s;	}}; /**  * (mgDialogFieldControls)  * Container for field controls, extendable  */var mgDialogFieldControls = {	version: '1.0',	subcontrols: {},	// (hascontrol)	hascontrol: function(cname) {		return typeof(this[cname])=="function";	},	// (callcontrol)	callcontrol: function(controller, cname, params, index) {		// execute control				if(this.hascontrol(cname)) {			try {				var item = $("<div></div>");				return this[cname](controller, item, $.extend({}, params, controller.parentoptions), index);			} catch(e) {				mgErrorMessage(sprintf('Dialog Control %s generated an error:\n\n%s', cname, e.message));			}		} 		return false;	},	// (registersubcontrol)	registersubcontrols: function(dest, clist) {		var that = this;		$.each(clist.split(","), function(index, name) {			// register function			that[name] = function(controller, item, params, index) {				return this[dest](controller, item, params, index, name);			};		});	},}; /**  * (divider)  */mgDialogFieldControls.divider = function(controller, item, params, index) {	// create params	var params = $.extend({}, {top:false, clear: false, text: false, style: {}}, params); 	// prepare item	item.addClass("divider"); 	if(params.text){		item.addClass("withlabel").append($("<div></div>").mgDialogFontStyle(params.style).append(params.text))		if(index == 0) {			item.css({'margin-top':10});		}	}	if(params.clear){		item.addClass("clear");	} 	if(params.top) {		item.css("margin-top", params.top)	};		return item;};/**  * (wizardtitle)  */mgDialogFieldControls.wizardtitle = function(controller, item, params, index) {	// create params	var params = $.extend({}, {title:false, subtitle: false, icon: false}, params); 	// prepare item	item.addClass("wizardtitle").disableSelection(); 	item.append($("<div></div>").addClass("title").append(params.title));	if(params.icon) {		item.addClass("withicon").append($("<div></div>").addClass("icon").css("background-image", sprintf("url(%s)", params.icon)));	}	if(params.subtitle){		item.addClass("withsubtitle").append($("<div></div>").addClass("subtitle").append(params.subtitle));	}		item.css({position:"relative", left:-1*controller.parentoptions.padding, top:-1*controller.parentoptions.padding, width: controller.parentoptions.parentwidth});	return item;};/**  * (html)  */mgDialogFieldControls.html = function(controller, item, params, index) {	var params = $.extend({}, {id: false, classes: false, after: false, itemcontext: false, source:false}, params),		source = typeof(params.source)=="function"?params.source(params.itemcontext?item:false):params.source;	// assign to item	if(!params.itemcontext) {		item.html("").append(source);	}	// add id	if(params.id) {		item.attr("id", params.id);	}	// add classes	if(params.classes) {		item.addClass(params.classes);	}	// trigger event	if(typeof(params.after)=="function") {		item.bind("after", params.after);	}	// return item	return item;};/**  * (web)  */mgDialogFieldControls.webcontrol = function(controller, item, params, index) {	// create params	var params = $.extend({}, {url:false, border: false, full: true}, params); 	// prepare item	item.addClass("webcontrol"); 	// check full	if(params.full) {item.css({width:'100%', height:'100%'});}	// create control	var iframe = $("<iframe></iframe>").attr($.extend({}, {src:params.url}, params.border?{}:{frameborder:0,border:0}, params.full?{width:'100%',height:'100%'}:{}));	// add to item	item.append(iframe);	// return item	return item;};/**  * (label)  */mgDialogFieldControls.label = function(controller, item, params, index) {	// create params	var params = $.extend({}, {labeldistance: false, action: false, htmlid: false, button: false, outline: false, height: false, scrolling: false, header: false, style: {}, outlineClass: false, text: '', icon: false}, params); 	//prepare item		item.addClass("label").disableSelection().append(params.text?params.text.replace(/\n/gi, "<br/>"):params.text).mgDialogFontStyle(params.style);	// set outline	if(params.outline){		switch(params.outline) {			case "error": params.outlineClass = 'errorlabel'; params.icon = "exclamation"; break;			case "warn": case "warning": params.outlineClass = 'warnlabel'; params.icon = "error"; break;			case "info": case "information": params.outlineClass = 'infolabel'; params.icon = "information"; break;			case "confirm": case "confirmation": params.outlineClass = 'confirmlabel'; params.icon = "accept"; break;			default: params.outlineClass = 'infolabel'; break;		}		item.addClass("outline").addClass(params.outlineClass).addClass("-corner-all-small").css("width", "auto");	}	// set icon	if(params.icon) {		item.addClass("icon").mgIconize(params.icon, {position:'absolute', 'class':'icon'});	}	// set header	if(params.header) {		item.addClass("header");	}	// set label scrollable	if(params.scrolling) {		item.css({height: params.height, 'overflow-y': 'scroll'});	}	// set htmlid	if(params.htmlid) {		item.attr("id", params.htmlid);	}	// set distance	if(params.labeldistance) {		item.css("margin-left", params.labeldistance);	}	// add button if available	if(typeof(params.buttons)=="object") {		// create button array		var that = this;		$.each(params.buttons.reverse(), function(index, button) {			//item.append(that.button(controller, $("<div></div>"), $.extend({}, index==0?{labeldivider: true}:{}, button), -1));			item.append(that.button(controller, $("<div></div>"), button, -1));		});		// set full span		item.css({width:'auto', position:'relative', 'margin-bottom': 20});	}	// add action	if(typeof(params.action)=="function") {		item.find("a[action]").each(function(){			$(this).bind('click touchend', function(){				params.action($(this).attr('action'));			});		});	}	// return item	return item;};/**  * (button)  */mgDialogFieldControls.button = function(controller, item, params, index) {	// initialize parameter	var params = $.extend({}, {large: false, disabled: false, icon: false, label: false, action: false, distance: false}, params);	// create button	item.addClass("button -corner-all-small").disableSelection('pointer');	// apply settings	if(params.icon){item.addClass("withicon").mgIconize(params.icon, {position: 'absolute'});}	if(params.label) {item.append(params.label);} else {item.addClass("nolabel");}	if(params.distance){item.css("margin-left", params.distance==true?7:params.distance);}	if(params.labeldivider) {item.css("margin-left", 20);}	if(params.disabled){item.addClass("disabled");}	if(params.large){item.addClass("large");}	// assign event	if(!params.disabled &&typeof(params.action)=="function"){		item.bind('click touchend', params.action);	} 	// return item	return item;};/**  * (buttons)  */mgDialogFieldControls.buttons = function(controller, item, params, index) {	var that = this, params = $.extend({}, {buttons:[], disabled: false, alignwithlabel: false}, params);	// run buttons	if(params.buttons) {		$.each(params.buttons, function(index, button) {			item.append(that.button(controller, $("<div></div>"), $.extend({}, {disabled: params.disabled}, index>0?{distance:true}:{}, button), -1));		});	}	// options	if(params.alignwithlabel) {		item.css("margin-left", 123);	}	// return	return item;};/**  * (inputcontrol)  * subcontrol for input and various other text fields  */  /** register controls */mgDialogFieldControls.registersubcontrols('inputcontrol', 'input,text,date,time,combo,file,checkbox,color,actionbuttons');/** inputcontrol handler */mgDialogFieldControls.inputcontrol = function(controller, item, params, index, type) {	// initialize params	var params = $.extend({}, {spellcheck: false, disabled: false, withtextbold: false, storevalue: false, visible: true, setdefault: false, controlid: false, id: false, labelwidth: false,specialformat: false, format: false,extop: false, leftmargin: false, shortlabel: false, reference: false, resizeable: false, withtext: false, onremove: false, change: false, filter: false, readstorage: false, maxsize: false, buttons: false, select: false, required: false, readonly: false, password: false, rows:false, defaultvalue: false, callback:null, mask:false,checked: false, style: {}, options: false, buffer: null, storage: false, text: '', label: '', size: 'auto', length: false, numeric: false, hint: false, hinticon: false, success: false, accept: false, margins: false}, params); 	// initialize item	item.addClass("input");	// initialize value	var value = params.storage?controller.readstorage(params.storage):params.text;	var nodefault = false;	// set item margin	if(params.margins) {		var margins = $.extend({}, {top:0, left:0, right: 0, bottom:0}, params.margins);		item.css({"margin-left":margins.left,"margin-top":margins.top,"margin-right":margins.right,"margin-bottom":margins.bottom});	}	if(params.id) {		item.attr("id", params.id);	}	if(!params.visible) {		item.hide();	}	if(params.storage) {		item.attr("storage-name", params.storage);	}	// generate by type	switch(type) {		case "asset": 			item.addClass("asset");			var input = $("<div></div>").addClass("container"); input.data({"value": value, "reference": params.reference});			input.bind({				'storage': function() {					var d = $(this).data("value");					if(params.storage){dlg.storages[params.storage] = d;}					if(tab){dlg.tabs[tab][index].buffer = d}					if(typeof(params.callback)=="function"){params.callback(d, dlg)}				},								'getasset': function() {					var t = $(this);					sbUIGetAsset(function(r, data) {						var d = JSON.stringify(data);						t.data("value", d).trigger('storage').trigger('updateasset');					}, {display:params.filter});					},				'removeasset': function() {					$(this).data("value", false).trigger('storage').trigger('updateasset');					if(typeof(params.onremove)=="function") {						params.onremove($(this).data("reference"));					}				},				'updateasset': function() {					var t = $(this),						v = t.data("value");					t.html("");					try{v=$.parseJSON(v)}catch(e){v=false}					if(!v)  {						t.append($("<div></div>").addClass("buttonlink").append("Change").click(function(){							t.trigger('getasset');						}));					} else {						switch(v.type) {							case "image":								var pu = v.preview+"/?"+(params.height?"mode=height&height="+params.height:"");								$("<div></div>").addClass("sb-corner-all-small image").append($("<img/>").attr({src: pu})).appendTo(t);								break;						}						t.append($("<div></div>").addClass("buttonlink").append("Change").click(function(){							t.trigger('getasset');						}));						t.append($("<div></div>").addClass("buttonlink").append("Remove").click(function(){							t.trigger('removeasset');						}));					}				}			});			input.trigger('updateasset');			break;					case "actionbuttons":			var input = $("<span></span>");			break;			case "combo": 			var input = $("<select></select>"); 			if(params.options) {				if(typeof(params.options) == "function") {params.options = params.options();}				if(typeof(params.options) == "string") {params.options = params.options.split(",")}				if(params.allowempty) {					input.append($("<option></option>").attr($.extend({}, {value: ""}, params.allowemptydisabled?{disabled: 'disabled'}:{})).html(params.allowemptylabel?params.allowemptylabel:""));				}				$.each(params.options, function(ix, name) {					if(typeof(name)=="function") name = name();					input.append($("<option></option>").attr("value", ix).html(name));				});			}			value = (value==''||!value)?(params.select?params.select:(params.defaultvalue?params.defaultvalue:"")):value;			if(!value){				value = input.find("option:first").val()			}			if(params.disabled||params.readonly){input.attr("disabled", "disabled");}			break;					case "checkbox":			var b = value!=""||typeof(value)=="boolean"?(value=="1"||value==1||value=="true"?true:false):params.checked;			var input = $("<div></div>").addClass("-corner-all-small checkbox").append($("<div></div>").addClass("-corner-all-tiny checkboxbutton"+(b?" checked":"")));			item.addClass("checkbox");			params.size = false;			item.click(function() {				var b = $(this).find(".checkboxbutton");				if(b.hasClass("checked")) {b.removeClass("checked");}else{b.addClass("checked");}				var checked = b.hasClass("checked"),					vc = params.numeric?(checked?1:0):(checked?"true":"false");				if(params.storage){controller.writestorage(params.storage, vc)}				if(typeof(params.callback)=="function"){params.callback(vc);}			});			break;					case "date":		case "time":			var ftoptions = {				date: ["{%DTFormatDate}", "{%DTTitleDate}"],				time: ["{%DTFormatTime}", "{%DTTitleTime}"],				datefull: ["{%DTFormatDateName}", "{%DTTitleDate}"],				datetime: ["{%DTFormatDateTime}", "{%DTTitleDateTime}"],				datetimefull: ["{%DTFormatDateTimeName}", "{%DTTitleDateTime}"],			};			var ft = type=="time"?ftoptions["time"]:ftoptions["date"];			if(params.format&&ftoptions[params.format]) {				ft = ftoptions[params.format];			}					params.readonly = true;			params.size = params.size=="auto"?(type=="time"?10:20):params.size;			nodefault = true;			var input = $("<input/>").attr({readonly:'readonly', type:'text'});			input.mgDateTimePicker_picker({				timestamp: !isNaN(parseInt(value))?parseInt(value):false,				format: params.specialformat?params.specialformat:ft[0],				labelTitle: ft[1],				labelDismiss: "{%ButtonClose}",				labelDayOfMonth: "{%DTLabelDayOfMonth}",				labelHour: "{%DTLabelHour",				labelMinute: "{%DTLabelMinute}",				labelSecond: "{%DTLabelSecond}",				labelMonth: "{%DTLabelMonth}",				labelYear: "{%DTLabelYear}",				dayNames: [{%LocalizedDayNames}],				dayAbbreviations: [{%LocalizedDayAbbreviations}],				firstDOW: {%LocalizedFirstDayOfWeek},				monthAbbreviations: [{%LocalizedMonthAbbreviations}],				monthNames: [{%LocalizedMonthNames}],			});			// bind set event			input.bind("set", function(ev, c) {				var o = $(this).data("__ref");				o.set(c);				o.upd();			});			// additionals			if(params.readonly){input.attr("readonly", "readonly");}			if(params.disabled){input.attr("disabled", "disabled");}			// reset value			value = null;			break;								case "color":			if(!params.size||params.size=="auto") {params.size = false;}			//params.size = false;			value = !value||value==""?(params.defaultvalue?params.defaultvalue:'#000000'):value;			item.addClass("color");			var input = $("<input/>").mask('#******').addClass("colorinput").click(function(e){				e.stopPropagation();								var that = $(this);				var cd = $('.sb-ui-widget-colordrop');				if(cd.length!=0) {					cd.remove();				} else {					var cp = $("<div></div>").css({'z-index':99999999999999999}).farbtastic(function(color){						that.parent().find('.colorbox').css({background:color});						that.val(color);						that.trigger('update');						if(typeof(params.change)=='function') {							params.change(color);						}					}), fb = cp.get(0), fb = fb.farbtastic;										that.keypress(function(e){if(fb){fb.setColor($(this).val())}}).keypress();					var dropdown = $("<div></div>").addClass("sb-ui-widget-colordrop").append(cp);					var of = $(this).parent().find(".colorbox").offset();					dropdown.css({top: of.top+24, left: of.left-4});					$('body').append(dropdown);					$('body').click(function(){						dropdown.remove();					});				}			});			item.append($("<div></div>").data("ref", input).css({left:params.label?127:5, background:value}).addClass("colorbox").click(function(e){				e.stopPropagation();					var c =$(this).data("ref");				c.trigger('click');			}));			break;		case "text":			var input = $("<textarea></textarea>"); 			item.addClass("textarea");			if(params.length){input.attr('maxlength', params.length);}			if(params.numeric){input.numeric();}					if(params.mask){input.mask(params.mask);}			if(params.defaultvalue){input.data('default', params.defaultvalue).addClass("hasdefault"); value = !value?params.defaultvalue:value;}			if(params.rows){input.attr("rows", params.rows);}			if(params.height){input.css("height", params.height);}			if(params.readonly){input.attr("readonly", "readonly");}			if(params.disabled){input.attr("disabled", "disabled");}			if(!params.resizeable){input.css("resize", "none");}			if(params.spellcheck){input.attr("spellcheck", "true");}			break;					case "file":			params.size = false;			item.addClass("file");			var loader = $("<div></div>").addClass("loader").appendTo(item);			var input = this.button(controller, $("<div></div>"),{label:params.label}, -1);			input.css({cursor:'pointer'}).selectfile({				maxsize: params.maxsize,				accept: params.accept,				success: function(filedata) {					if(typeof(params.success)=="function") {						params.success(filedata, item);					}				},				failed: typeof(params.failed)=="function"?params.failed:function(error, filedata) {					switch(error) {						case "mime": var msg = sprintf('{%FileUploadErrorMime}', filedata.type); break;						case "size": var msg = sprintf('{%FileUploadErrorSize}', mgBytesToSize(params.maxsize), mgBytesToSize(filedata.size)); break;						default: var msg="{%FileUploadError}"; break;					}					mgMessageDialog("{%FileUploadErrorTitle}", msg);				}			});						break;							default: 			var input = $("<input/>").attr({type:params.password?'password':'text'}); 			if(params.length){input.attr('maxlength', params.length);}			if(params.numeric){input.numeric();}					if(params.mask){input.mask(params.mask);}			if(params.defaultvalue){input.data('default', params.defaultvalue).addClass("hasdefault"); value = !value?params.defaultvalue:value;}			if(params.readonly){input.attr("readonly", "readonly");}			if(params.disabled){input.attr("disabled", "disabled");}			break;	}	// assign default classes	input.addClass("-corner-all-small");	// control id	if(params.controlid) {		input.attr("id", params.controlid);	}	// assign size	if(params.size) {		var maxsize = params.parentwidth - (params.label?(params.shortlabel?110:150):0);		if(params.size=="auto"){			switch(type) {				case "combo": params.size = maxsize + 16;break;				default: params.size = maxsize; break;			}		} else {			params.size = params.size * 8;		}		if(params.size>maxsize){			params.size=maxsize;			switch(type){				case "combo": params.size=maxsize+16; break;				case "text": params.size=maxsize; break;			}				}		input.css({width: params.size});	}	// assign value	if(value == "" && input.hasClass("hasdefault")||value==input.data('default')) {		value=input.data('default');		if(params.text) {			value = params.text;		} else if (!nodefault) {			input.addClass("isdefault")		}		input.data('setdefault', params.setdefault);	}	if(value!=null) {		input.val(value);	}	// assign events	input.bind({		'change': function(e) {			e.preventDefault();			$(this).trigger("domchange").trigger("inputchange");		},		'inputchange': function(){			var that = $(this), vn = '';			// process value			switch(type) {				case "combo":					var vn = $(this).val();					if(params.storevalue) {						var vn = $(this).find("option:selected").text();					}					break;							case "date":				case "time":					var d = that.data("timestamp");					if(d&&d.getTime) {						var vn = d.getTime();					}					break;				default:					var vn = $(this).val();					break;			}			$(this).trigger("inputstorage", [vn]);			if(typeof(params.callback)=="function"){				params.callback(vn, that);			}					},		'inputstorage': function(e, vn) {			if(vn==null||typeof(vn)=="undefined") return;			if(params.storage) {				if($(this).hasClass("hasdefault")&&$(this).hasClass("isdefault")) {					var vn= $(this).data("setdefault")==true?$(this).data("default"):"";				}				controller.writestorage(params.storage, vn);			}		},		'focus': function() {			if($(this).hasClass("isdefault")){				$(this).removeClass("isdefault").val("");			}			$(this).removeClass("required");		},		'blur': function(){			if($(this).hasClass("hasdefault")){				if($(this).val()==""){					$(this).addClass("isdefault").val($(this).data('default')).change();				}			}			if(params.required&&$(this).val()==""){				$(this).addClass("required");			}		},		'keyup': function(e) {			if($(this).hasClass("hasdefault")&&e.keyCode==27) {$(this).val("").blur();}			var t = $(this);			clearTimeout(t.data("keytimer"));			t.data("keytimer", setTimeout(function() {				t.trigger('inputchange');			}, 600));		}	});	// trigger change	input.trigger('inputstorage');	// register form validation	// create item	if(params.label){		item.append($("<span></span>").disableSelection(type=="checkbox"?"pointer":"default").addClass("label").addClass(params.shortlabel?"short":"").css(params.labelwidth?{width:params.labelwidth}:{}).mgDialogFontStyle(params.style).html(params.label));	}	// other 	if(params.leftmargin!=false){		input.css("margin-left", params.leftmargin);	}	// run extended operations	if(typeof(params.extop)=="function") {		params.extop(input);	}	// create item	item.append(input);	// buttons	var that = this;	if(params.buttons) {		$.each(params.buttons, function(index, button) {			item.append(that.button(controller, $("<div></div>"), $.extend({}, {large: params.large, disabled: params.disabled}, button), -1));		});	}	// withtext	if(params.withtext) {		item.append($("<span></span>").addClass("withtext").css({'margin-left':10, 'font-weight':params.withtextbold?'bold':'normal'}).css(params.withtextwidth?{display:'inline-block',width:params.withtextwidth}:{}).html(params.withtext).disableSelection());	}	// create hint		if(params.hint){		var hint = $("<div></div>").disableSelection().addClass("hint").addClass(params.shortlabel?"short":"");		if(params.hinticon){			hint.addClass("withicon").mgIconize((params.hinticon == true?"help":params.hinticon), {position:'absolute', 'class':'icon'});		}		if(params.labelwidth) {			hint.css("padding-left", params.labelwidth + (params.hinticon?25:0));			hint.find(".icon").css({left: params.labelwidth + 4});		}				item.append(hint.append(params.hint));	}	// bind item 	item.bind({		setvalue: function(e, value) {			$(this).find("input").val(value).trigger("update");		}	});	// return item;	return item;};/**  * (Icon Buttons) creates a quick button bar only with icons  */mgDialogFieldControls.iconbuttons = function(controller, item, params, index) {	};/**  * (grid)  */mgDialogFieldControls.grid = function(controller, item, params, index) {	// create params	var that=this, params = $.extend({}, {forcewidth: false, scrollhorizontal: false, scrollbarwidth: 10, cookie: false, itemsperpage: 10, itemsperpageoptions: [10,25,50,100,250,500], id: false, sortasc: false, label: false, shortlabel: false, rowselect: true, rowhighlight: false, intabs: false, fitalign: false, preventsorting: false, alwayssortable: false, events: {}, controlbar: true, controlactions: {add: true, remove: true, search: true, pager: true}, searchbarwidth: 200, height: 10, itemheight: 26, values: false, columns: false, header: true}, params);	// add 	item.addClass("input grid").attr(params.id?{id: params.id}:false);	// initialize runtime variables	var currentpage = 0, itemsperpage = params.itemsperpage, sort = "", sortmode = false;		// check cookies	if(params.cookie) {		try {			itemsperpage = parseInt(mgGetCookie(params.cookie+'_ipp', params.itemsperpage));		} catch(e) {		}	}	// create container	var container = $("<div></div>").appendTo(item),		scrollarea = $("<div></div>").addClass("scrollarea").addClass(params.scrollhorizontal?"scrollboth":"").appendTo(container);	// add header and list	var header = $("<div></div>").addClass("header").addClass(params.intabs?"":"-corner-top-small").disableSelection().appendTo(scrollarea),		list = $("<div></div>").addClass("list").disableSelection().addClass(!params.header?"-corner-top-small":"").appendTo(scrollarea),		blocker = $("<div></div>").addClass("blocker -corner-all-small").appendTo(scrollarea),		loader = $("<div></div>").addClass("loader -corner-all").append($("<img/>").attr({src:"/resources/dialogs/images/dialog-icon-loader-large.gif"})).appendTo(blocker);	// set header options	if(!params.header) {header.hide();}	// set list options	list.css({height: params.height * (params.itemheight+1)});	// update blocker	blocker.css({width:controller.parentoptions.parentwidth, height: params.height * (params.itemheight+1) + 51});	// create columns	var columns = false, sortablecount = 0, adjustedwidth = 0, adjustedcount = 0, maxsize = 0, autowidth = 0, scrollareawidth = 0;	// add controlbar	if(params.controlbar) {		// create controlbar		var controlbar = $("<div></div>").addClass("controlbar -corner-bottom-small").appendTo(container);		// actions		var actions = [];		// add		if(params.controlactions.add) { actions.push({type:'button', related:'add', action:function() {			if(typeof(params.events.onadd)=="function"){params.events.onadd(item)}		}})};		// delete/remove		if(params.controlactions.remove) {actions.push({type:'button', related:'delete', action:function() {			if(typeof(params.events.ondelete)=="function"){				var items = [];				list.find(".selected").each(function(){					items.push($(this).data("item"));				});				params.events.ondelete(items, item);			}		}})};		// divider		if(actions.length!=0){actions.push({type:'divider'});}		// searchbar		if(params.controlactions.search) {actions.push({type:'search', action: function() {			// run update			item.trigger('update');		}})};		// divider		if(actions.length!=0){actions.push({type:'divider'});}		// pager		if(params.controlactions.pager) {			actions.push({type:'pager'});		};		// create smallbuttons		$.each(actions, function(index, cparams) {			switch(cparams.type) {				case "button": $("<div></div>").attr("rel", cparams.related).addClass("controlbutton -corner-all-small").css("background-image", sprintf("url(/resources/dialogs/images/dialog-icon-%s.png)", cparams.related)).click(cparams.action).appendTo(controlbar); break;				case "search": $("<input/>").addClass("search -corner-all-small").change(cparams.action).css({width: params.searchbarwidth}).appendTo(controlbar); break;				case "divider": $("<div></div>").addClass("divider").appendTo(controlbar); break;				case "pager":					var pager = $("<div></div>").addClass("pager").appendTo(controlbar);					var ipp = params.itemsperpageoptions.indexOf(itemsperpage), ipp = ipp!=-1?ipp:0;					pager.append(that.combo(controller, $("<div></div>").addClass("ctl"), {label:'Rows', labelwidth: 30, select: ipp, options:params.itemsperpageoptions, callback: function(v) {						itemsperpage = params.itemsperpageoptions[v];						item.trigger('update');					}}, -1));					pager.append(that.input(controller, $("<div></div>").addClass("ctl pageinput"), {label:'Go to', labelwidth: 30, size: 2, callback: function(v) {						if(!isNaN(parseInt(v))) {							currentpage = parseInt(v);							item.trigger('update');						}					}}));					pager.append($("<div></div>").addClass("pagerlabel").disableSelection().html("&nbsp;"));					$("<div></div>").addClass("controlbutton -corner-all-small").css("background-image", "url(/resources/dialogs/images/dialog-icon-prev.png").click(function() {						item.trigger('prevpage');					}).appendTo(pager);					$("<div></div>").addClass("controlbutton -corner-all-small").css("background-image", "url(/resources/dialogs/images/dialog-icon-next.png").click(function() {						item.trigger('nextpage');					}).appendTo(pager);					break;							}		});	} else {		list.addClass("-corner-bottom-small");	}	// create control structures	item.bind({		'add': function() {			$(this).find(".controlbutton[rel=add]").click();		},		'remove': function() {			$(this).find(".controlbutton[rel=delete]").click();		},		'nextpage': function() {			currentpage += 1;			$(this).trigger("update");		},		'prevpage': function() {			currentpage -= 1; if(currentpage<0){currentpage = 0;}			$(this).trigger("update");		},		'rowclick': function(ev, index) {			$(this).find("row").eq(index).trigger('click');		},		'redrawrow': function(ev, rowindex, rowdata) {							},		'fullupdate': function(ev) {			$(this).trigger("updateheader").trigger("update");		},		'updateheader': function() {			// clean			header.empty();			// assign values			columns = params.columns?((typeof(params.columns)=="function")?params.columns():params.columns):[]; 			// check			if(!mgIsArray(columns)) columns = [];			// adjust values			sortablecount = 0;			adjustedwidth = columns.length * 5;			adjustedcount = 0;			// get autowidth			try {				maxsize = controller.parentoptions.parentwidth - (params.fitalign?100:25) - params.scrollbarwidth;				autowidth = Math.round((maxsize - adjustedwidth) / (columns.length - adjustedcount));			} catch(e) {				autowidth = 0;			}			// assign force width			if(params.forcewidth) {				autowidth = params.forcewidth;			}			// build columns			$.each(columns, function(index, column) {				if(column.width&&column.width!="auto") {					adjustedwidth += parseInt(column.width);					adjustedcount += 1;				} 				// adjust sortable				if(params.alwayssortable) {					column.sortable = true				}				// count sort				if(column.sortable) {					sortablecount += 1;				}			});			// adjust sort			if(sortablecount == 0) {				if(columns[0]) {					columns[0].sortable = true;				}			}			// init			scrollareawidth = 0;			// assign autowidth and create header			$.each(columns, function(index, column){				// prepare column				columns[index] = $.extend({}, {width: false, label: false, field: false}, column);				// create autowidth				if(!columns[index].width||columns[index].width=="auto") {					columns[index].width = autowidth;				}				// set other				columns[index].width = parseInt(columns[index].width);				// add 				scrollareawidth += columns[index].width + 8;				// add column to header				var ch = $("<div></div>").addClass("column").css({width: columns[index].width}).append(column.label).appendTo(header);				// check if column is sortable				if(column.sortable) {					// make sortable, add indicator and add event					ch.data({column: column, sortmode: true}).addClass("sortable").append($("<span></span>").addClass("sortindicator none")).bind('click', function(ev, sortasc) {						var c = $(this).data("column"), i = $(this).find("span"), sm = $(this).data("sortmode");						// check						if(sortasc) sm = false;						// remove any column						item.find(".sortindicator").removeClass("asc").removeClass("desc").addClass("none");						// toggle sortmode						sm = sm==true?false:true;						// update field						$(this).data("sortmode", sm);						// adjust indiciator						i.removeClass("none").addClass(sm?"desc":"asc");						// run sort						sort = c.sortfield?c.sortfield:c.field;						sortmode = sm==true?"d":"a";						item.trigger("update");					});				}			});			// scroll			if(params.scrollhorizontal) {				header.css("width", scrollareawidth + 10);			}			// finalize header			header.append(mgClear());		},		'update refreshlist': function(ev, updateonly) {			// show blocker and remove all inline fields			blocker.show();			$(".-grid-inlinecontrol").remove();			// get values			var values = {};			if(!updateonly&&typeof(params.events.onvalues)=="function"){				var search = item.find("input.search").val(),					values = params.events.onvalues(currentpage, itemsperpage, sort, sortmode, search?search:false);			} 			// format values			if(typeof(values.rows)!="object") {				var values = $.extend({}, {total: values.length, page: 0, rows: values});			}			// run values			if(values&&columns) {				// reset counter				var x =  0;				// automatic sort				// values = mgSortObject(values, mgSortByLetter);				// update page				currentpage = parseInt(values.page);				// create pager data				var pf = (currentpage) * itemsperpage + 1,					pt = pf + itemsperpage - 1,					pt = values.total < pt?values.total:pt;				// update pagerlabel				item.find(".pagerlabel").html(sprintf("%s - %s of %s", pf, pt, values.total));				item.find(".pageinput").find("input").val(currentpage+1);				// clear list;				list.html("");				// update list				var c = 0;				$.each(values.rows, function(name, value) {					// add item					var row = $("<div></div>").data({item: value}).addClass("row").appendTo(list);					// add odd					if(x % 2) {						row.addClass("odd");					}					// add cells					$.each(columns, function(index, column) {						try {							// initialize							var f = column.field,								cell = $("<div></div>").addClass("cell");							// parse array value							if(f.indexOf(':')!=-1) {								var v="", a = f.split(":");								if(typeof(value[a[0]])=="object"){									v = value[a[0]][a[1]];								}							} else {								var v = typeof(value[column.field])!="undefined"?value[column.field]:"";							}														// do data formatting							if(typeof(params.events.oncellformat)=="function"){								var vn = params.events.oncellformat(column, v, cell, value);								if(vn) {v=vn}							} 							// automatic cell formatting							if(typeof(column.format)=="object") {									if(column.format[v]) {									v = column.format[v];								}							}							// array fix							if(typeof(v)=="object"){v = JSON.stringify(v)}							// final check on value							if(!v||v.length==0||v==" "){								v = "&nbsp;"							}							// add cell							cell.addClass(column.field==sort&&!params.preventsorting?"sorted":"").css({"line-height": parseInt(params.itemheight)+"px", width: column.width}).html(v).appendTo(row);							// icon support							if(column.icon) {								if(value[column.icon]) {									var icon = $("<div></div>").addClass("icon").css("background-image", sprintf("url(%s)", value[column.icon]));								} else {									var icon = $("<div></div>");									icon.mgIconize(column.icon);								}								// adjust icon								icon.css({width: params.itemheight - 2, height: params.itemheight - 2});								// adjust cell								cell.addClass("hasicon").css({"padding-left": params.itemheight + 5}).append(icon);								// adjust cell width								cell.css("width", column.width - params.itemheight);							}							c+=1;						} catch(e) {						}					});					// close row					row.append(mgClear());					// bind events					row.data("rowindex", x).bind({						'click touchend': function() {							var result = true;							if(typeof(params.events.onrowclick)=="function"){								if(params.events.onrowclick($(this).data("item"), item)) {									result = false;								}							} 							if(result&&params.rowselect){								$(this).toggleClass("selected");							} else if(params.rowhighlight) {								$(this).parent().find(".selected").removeClass("selected");								$(this).addClass("selected");							}													},						'dblclick': function() {							item.data("selectedindex", $(this).data("rowindex"));							if(typeof(params.events.onrowdoubleclick)=="function"){								if(params.events.onrowdoubleclick($(this).data("item"), item)) {									result = false;								}							} 							}					});					x += 1;				});				// set 				item.data("displaycount", x);				// check x				if(x==0) {					list.html("").append($("<div></div>").addClass("-nodata").css({"margin-top":Math.round(list.height()/2)}).append("(No data available)"));				}								// scroll				if(params.scrollhorizontal) {					list.css("width", scrollareawidth + 10);				}			}			// values complete			if(!updateonly&&typeof(params.events.onvaluescomplete)=="function"){				params.events.onvaluescomplete(item);			}			// set cookies			if(params.cookie) {				mgSetCookie(params.cookie+'_ipp', itemsperpage, COOKIE_MONTH);			}			blocker.hide();		}	});	// build header	item.trigger("updateheader");	// trigger update with automatic sort	item.find(".sortable:first").trigger('click', [params.sortasc]);	// trigger after	if(typeof(params.events.onrun)=="function") {		params.events.onrun(item);	}	// return item	return item;};/**  * (CollectionEditor)  */mgDialogFieldControls.collection = function(controller, item, params, index) {	// create params	var that = this, params = $.extend({}, {inspectorfield: false, inspectorkey:'label', inspectordefaultvalue:'default', inspector: false, id:false, isarray: false, events: false, defaultvalues: false, intabs: false, readonly: false, autodetect: false, callback: false, fitalign: false, shortlabel: false, label:false, style: false, controlbar: true, storage: false, height: 5, itemheight: 26, values: false, columns: false, widthname: false, widthvalue: false}, params);	// add 	item.addClass("input collection").addClass(params.fitalign?"fit":"");	// set id	if(params.id) {		item.attr("id", params.id);	}	// set storage name	if(params.storage) {		item.attr("storage-name", params.storage);	}	// inspector mode	if(params.inspector) {		params.autodetect = true;	}	// auto format	var formatfield = function(inp, value, name) {		// done		var done = false;		// inspector mode		if(params.inspector&&typeof(params.inspectorfield) == "function") {			done = params.inspectorfield(inp, name, value);		}		//		if(!done && params.autodetect) {			switch(typeof(value)) {				case "object":					inp.attr("readonly", "true");					inp.val("(Collection)").click(function() {						if(typeof(params.events.oncollection)=="function") {							params.events.oncollection(values[inp.data("name")], function(n) {								values[inp.data("name")] = n;							});						}					});					break;									default:					// test for boolean					if(typeof(value)=="boolean"||value=="true"||value=="false"){						inp.parent().append($("<select><option value=0>false</option><option value=1>true</option></select>").css({width: columns[1].width + 1 + (params.fitalign?25:0), height: params.itemheight+"px"}).bind({							'change': function() {								var c = $(this).val();								if(typeof(value)=="boolean"){									inp.val(c==1?true:false);								} else {									inp.val(c==1?"true":"false");								}								inp.change();							}						}).val(value=="true"||value==true?1:0));					} else if((typeof(value)=="numeric"||!isNaN(parseInt(value)))&&(value.toString().length==13||value.toString().length==10)) {						// assign date field						//var dt = that.date(controller, $("<div></div>").addClass("datetime"), {format: 'datetime'}, -1);						//inp.parent().append(dt);						//dt.find("input").css({left: width:0});					} else if (value == "[]") {						// reset value as collection						values[inp.data("name")] = [];					} else {						inp.parent().find("select").remove();					}					break;			}		}		// adjust any selection box		inp.parent().find("select").css({width: columns[1].width + 1 + (params.fitalign?25:0), height: params.itemheight+"px"});	};		// create fitalign	if(params.fitalign) {		item.css({width: controller.parentoptions.parentwidth, height: controller.parentoptions.parentheight});	}	// create label	if(params.label){		item.append($("<span></span>").disableSelection().addClass("label").addClass(params.shortlabel?"short":"").css({"vertical-align":"top"}).mgDialogFontStyle(params.style).html(params.label));	}		// create size	var maxsize = controller.parentoptions.parentwidth - (params.label?(params.shortlabel?95:135):0);	// create container	var container = $("<div></div>").css({display:'inline-block', width: maxsize, overflow:'hidden'}).appendTo(item);	// add list	var list = $("<ul></ul>").addClass(params.fitalign||params.intabs?"":"-corner-top-small").addClass(params.intabs?"intabs":"").appendTo(container);	// set options	list.css({height: params.fitalign?(controller.parentoptions.parentheight-22):(params.height * (params.itemheight+1))});	// create columns	var columns = params.isarray?[		{label:'Name'}	]:[		{label: 'Name', width: params.widthname},		{label: 'Value', width: params.widthvalue}	];	// calculate width	var givenwidth = 0, givencount = 0;	$.each(columns, function(index, column) {		if(column.width) {			givenwidth += column.width;			givencount += 1;		} 	});	// get autowidth	try {		var autowidth = Math.round((maxsize - givenwidth - 30) / (columns.length - givencount)) - 10;	} catch(e) {		var autowidth = 0;	}	// assign autowidth and create header	$.each(columns, function(index, column){		// create autowidth		if(!columns[index].width) {			columns[index].width = autowidth;		}	});	// add controlbar	if(params.readonly) params.controlbar = false;	if(params.controlbar) {		// create controlbar		var controlbar = $("<div></div>").addClass("controlbar -corner-bottom-small").appendTo(container);		// create actions		var actions = {			'add':function() {				if(params.readonly) return;				// test events				// initialize values				if(!values) {values = {};}				// initialize success				var os = function(name, value) {					if(name&&name.length>0) {						values[name] = value;						item.trigger('refreshlist');					}				}				// get name of field				if(params.events&&typeof(params.events.onadd)=="function") {					params.events.onadd(values, os);				} else {									os(prompt('Enter value of field'));				}			},			'delete':function(){				if(params.readonly) return;				// find selected rows				item.find(".selected").each(function(){					var n = $(this).data("name");					delete values[n];				});				item.trigger('refreshlist');			}		}				// create smallbuttons		$.each(actions, function(name, f) {			var button = $("<div></div>").addClass("-corner-all-small").css("background-image", sprintf("url(/resources/dialogs/images/dialog-icon-%s.png)", name)).click(f).appendTo(controlbar);		});	}		// get values	var values = params.storage?controller.readstorage(params.storage):(params.inspector?{}:params.values);	// set defaultvalues	if(typeof(values)!="object"&&params.defaultvalues) {		values = params.inspector?{}:params.defaultvalues;	}	// build base values	if(!values||values=="") values = {};	// create control structures	item.bind({		'refreshlist': function() {			// run values			if(values&&columns) {				// reset counter				var x =  0;				// sort values				values = mgSortObject(values, mgSortByLetter);				// clear list;				list.html("");				// update list				$.each(params.inspector?params.values:values, function(name, value) {					// init icnt container					var icnt = false, inlabel = false;					// inspector mode					if(params.inspector) {						// assign						var ix = name, icnt = value;						// get name and value						var name = icnt.name,							inlabel = icnt.label,							value = values[icnt.name]?values[icnt.name]:(icnt[params.inspectordefaultvalue]?icnt[params.inspectordefaultvalue]:"");						// set default value						values[icnt.name] = value;					}					// add item					var line = $("<li></li>").data({container: icnt, index: x, name: name, value: value}).css({"line-height": params.itemheight+"px"}).appendTo(list);					// add odd					if(x % 2) {line.addClass("odd");}					// add name field					$("<span></span>").css({width: columns[0].width}).append(params.inspector?inlabel:(params.isarray?value:name)).disableSelection(params.isarray?'pointer':false).appendTo(line);					// add input					if(!params.isarray) {						var input = $("<input/>").data("name", name).css({height: params.itemheight+"px", width: columns[1].width + 1}).val(value?value:"").bind({							'change': function() {								var n = $(this).data("name");								values[n] = $(this).val();								formatfield($(this), $(this).val(), $(this).data("name"));								// execute callback								item.trigger("update", [$(this)]);							}						}).appendTo(line);						formatfield(input, value, name);						// Readonly						if(params.readonly) {							input.attr("readonly", "true");						}					}										// next row					x += 1;					// bind events					line.find("span").bind({						'click touchend': function() {							$(this).parent().toggleClass("selected");						},						'dblclick': function() {							if(params.readonly||params.isarray) return;							var n = $(this).text(),								v = prompt('Enter value of field', n);							if(v.length!=0&&v!=n) {								var j = values[n];								delete values[n];								values[v] = j;								$(this).parent().parent().trigger('refreshlist');							}						}					});				});				$(this).trigger('update');			}		},		'update': function(e, p){			if(params.storage){				controller.writestorage(params.storage, values);			}						// assign callback			if(typeof(params.callback)=="function") {				switch(true) {					case params.inspector:						params.callback(values, p);						break;					case !p:						params.callback(values, $(this));						break;				}			}		},		'setvalue': function(e, v) {			values = v;			$(this).trigger("refreshlist");		},		'addvalue': function(ev, name, value) {			values[name] = value;			$(this).trigger('refreshlist');		}	});	// trigger update	item.trigger('refreshlist');	// return item	return item;};/**  * (CodeEditor)  */var mgCodeEditorLoadedAssets = [];mgDialogFieldControls.codeeditor = function(controller, item, params, index) {	// create params	var that = this, params = $.extend({}, {callback: false, text: "", height: false, theme: false, mode: false, fitalign: false, allowfullscreen: true, storage: false}, params);	// detect codemirror	if(typeof(CodeMirror)!="function") {		// load styles		mgLoadCSS("/resources/dialogs/codeeditor/codemirror.css");		// load javascript		mgLoadJavaScript("/resources/dialogs/codeeditor/codemirror.js", false);	}	// add item	item.addClass("codeeditor");	// create textview	var textview = $("<textarea></textarea>").css({		width: controller.parentoptions.parentwidth,		height: params.height?params.height:controller.parentoptions.parentheight	}).appendTo(item);	// assign value	textview.val(params.storage?controller.readstorage(params.storage):params.text);	// bind events	textview.bind({		'after': function() {			if($(this).parent().find("div:first").hasClass("CodeMirror")) return;			// create editor			if(typeof(CodeMirror)=="function") {				var element = this,					value = $(this).val(),					value = typeof(value)=="string"?value:"";				// load assets				$.each([params.theme, params.mode], function(index, asset) {					if(asset&&mgCodeEditorLoadedAssets.indexOf(asset)==-1){						switch(index) {							case 0: mgLoadCSS(sprintf("/resources/dialogs/codeeditor/themes/%s.css", asset)); break;							case 1: mgLoadJavaScript(sprintf("/resources/dialogs/codeeditor/modes/%s/%s.js", asset, asset), false); break;						}						// assign						mgCodeEditorLoadedAssets.push(asset);					}				});				// create editor				var editor = CodeMirror.fromTextArea(this, {					content: value,					lineNumbers: true,					theme: params.theme,					mode: params.mode,					extraKeys: {						"Esc": function() {							if(params.allowfullscreen) {								var target = $(element).parent().find(".CodeMirror-scroll");								if(!target.hasClass("fullscreen")) {									target.addClass("fullscreen").css({height:'100%', width:'100%'});								} else {									target.removeClass("fullscreen").css({height:$(element).height(), width: $(element).width()});								}								editor.refresh();							}						}					},					onChange: function() {						clearTimeout(element.updatetimer);						element.updatetimer = setTimeout(function(){							$(element).val(editor.getValue()).trigger("update");						}, 300);					}				});				// set width and height of editor				$(this).parent().find(".CodeMirror-scroll").css({width: $(this).width(), height: $(this).height()});				// refresh editor				editor.refresh();					// focus				editor.focus();			}		},		'change update': function() {			if(params.storage){				controller.writestorage(params.storage, $(this).val());			}						// assign callback			if(typeof(params.callback)=="function"){				params.callback($(this).val(), $(this))			}			}	});	// return item	return item;};/**  * (Tabs)  */mgDialogFieldControls.tabs = function(controller, item, params, index) {	// create params	var that = this, params = $.extend({}, {id: false, margins: false, tabs: false, fitalign: false, simpletabs: false, callback: false}, params);	// create item	item.addClass("tabs");	// margins	if(params.margins) {		var margins = $.extend({}, {top:0, left:0, right: 0, bottom:0}, params.margins);		item.css({"margin-left":margins.left,"margin-top":margins.top,"margin-right":margins.right,"margin-bottom":margins.bottom});	}	// add html id	if(params.id) item.attr("id", params.id);	// create tab container	var tabcontainer = $("<div></div>").addClass("bar").appendTo(item);	// verify tabs	if(typeof(params.tabs)=="function") params.tabs = params.tabs();	// create tabs	var x = 0;	$.each(params.tabs, function(name, params) {		var tab = $("<div></div>").addClass("tab").append(name).data("data", {index:x, fields: params}).appendTo(tabcontainer);		tab.click(function() {			if(!$(this).hasClass("selected")) {				// remove selected				$(this).parent().find(".selected").removeClass("selected");				// add selected				$(this).addClass("selected");				// execute change				$(this).parent().trigger("ontabchange");			}		});		x+=1;	});	// create tabcontent	if(!params.simpletabs) {		$("<div></div>").addClass("tabcontent").appendTo(item);	}	// append triggers	tabcontainer.bind({		ontabchange: function() {			var data = $(this).find(".selected").data("data");			// check mode			if(params.simpletabs) {				if(typeof(params.callback)=="function"){					params.callback(data.index);				}			} else {				// create fields				var fd = mgCreateDialogFields(data.fields, $.extend({}, controller.parentoptions, {					scrollable: false, 					padding:0,					parentwidth: controller.parentoptions.parentwidth + (params.fitalign?0:(2*parseInt(controller.parentoptions.padding))),					parentheight: 'auto'				}));				// create control				$(this).parent().find(".tabcontent").html("").append(fd);				$(this).parent().find(".tabcontent").triggerHandlers('after');			}		}	});	// initialize	tabcontainer.append(mgClear()).disableSelection().find(".tab:first").click();		// return item	return item;};/**  * (Switcher) same as tabs but provides a multi input control  */mgDialogFieldControls.switcher = function(controller, item, params, index) {	// create params	var that = this, params = $.extend({}, {tabs: false, storage: false, callback: false, fields: []}, params);	// create item	item.addClass("tabs switcher");	// read storage	var values = params.storage?controller.readstorage(params.storage):{};	// create tab container	var tabcontainer = $("<div></div>").addClass("bar").data("values", values).appendTo(item);	// create tabs	var x = 0;	$.each(params.tabs, function(id, name) {		var tab = $("<div></div>").addClass("tab").append(name).data("data", {index:x, id: id}).appendTo(tabcontainer);		tab.click(function() {			if(!$(this).hasClass("selected")) {				// remove selected				$(this).parent().find(".selected").removeClass("selected");				// add selected				$(this).addClass("selected");				// execute change				$(this).parent().trigger("ontabchange");			}		});		x+=1;	});	// create tabcontent	if(!params.simpletabs) {		$("<div></div>").addClass("tabcontent").appendTo(item);	}	// append triggers	tabcontainer.bind({		ontabchange: function() {			var that = this,				values = $(this).data("values"),				data = $(this).find(".selected").data("data"),				id = data.id;			// format values			values = typeof(values)=="object"?values:{};			// create fields			var fd = mgCreateDialogFields(params.fields, {				scrollable: false, 				padding:0,				parentwidth: controller.parentoptions.parentwidth + controller.parentoptions.parentwidthadjusted,				parentheight: 'auto',				onwritestorage: function(name, value) {					if(params.storage) {						if(!values[id]) {							values[id] = {};						}						values[id][name] = value;						controller.writestorage(params.storage, values);						$(that).data("values", values);					}				},				onreadstorage: function(name) {					if(params.storage) {						var values = controller.readstorage(params.storage);						if(typeof(values)=="object") {							if(values[id]&&values[id][name]) {								return values[id][name];							}						}					}					return "";				}			});			// create control			$(this).parent().find(".tabcontent").triggerHandlers('destroy').remove();			// add control			$(this).parent().append($("<div></div>").addClass("tabcontent"));			// trigger handlers			$(this).parent().find(".tabcontent").append(fd).triggerHandlers('after');		},		after: function() {			$(this).find(".tab:first").click();				}	});	// initialize	tabcontainer.append(mgClear()).disableSelection();	// return item	return item;};/**  * (VisualEditor)  */var mgTinyMCETimer = false;mgDialogFieldControls.visualeditor = function(controller, item, params, index) {	// create params	var that = this, params = $.extend({}, {editorsettings: false, callback: false, text: "", height: false, theme: false, mode: false, fitalign: false, allowfullscreen: true, storage: false}, params);	// detect codemirror	if(typeof(mgTinyMCELoaded)!="boolean") {		// load javascript		mgLoadJavaScript("/resources/dialogs/visualeditor/jquery.tinymce.js", false);	}	// add item	item.addClass("visualeditor");	// create textview	var textview = $("<textarea></textarea>").css({		width: controller.parentoptions.parentwidth,		height: params.height?params.height:controller.parentoptions.parentheight	}).appendTo(item);	// assign value	textview.val(params.storage?controller.readstorage(params.storage):params.text);	// bind events	textview.bind({		'after': function() {			var tx = this;			if($(this).parent().find("span:first").hasClass("mceEditor")) return;			// create editor			$(this).tinymce($.extend({}, {				script_url: '/resources/dialogs/visualeditor/tiny_mce.js',				theme : 'advanced',				plugins : 'spellchecker,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template', 				theme_advanced_buttons1 : 'bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,sub,sup,|,charmap,|,forecolor,backcolor',				theme_advanced_buttons2 : 'cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,ltr,rtl,|,undo,redo,|,link,unlink,anchor,|,image,media,|,code,|,insertdate,inserttime,|,hr,advhr,',				theme_advanced_buttons3 : 'tablecontrols,visualaid,|,pagebreak,|,insertlayer,moveforward,movebackward,absolute,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,blockquote',				theme_advanced_toolbar_location : 'top',				theme_advanced_toolbar_align : 'left',				theme_advanced_resizing : false,				width : $(this).width(),				height: $(this).height(),				template_external_list_url : "js/template_list.js",				external_link_list_url : "js/link_list.js",				external_image_list_url : "js/image_list.js",				media_external_list_url : "js/media_list.js",				onchange: function(ed) {								},				oninit: function(ed) {					ed.focus();				},				setup : function(ed) {       					ed.onKeyUp.add(function(ed, l) {						clearTimeout(mgTinyMCETimer);						mgTinyMCETimer = setTimeout(function() {							var v = ed.getContent();							if(params.storage){								controller.writestorage(params.storage, v);							}										if(typeof(params.callback)=="function"){								params.callback(v, $(this))							}						}, 450);					});									}			}, params.editorsettings));		},		'destroy': function() {			$(this).tinymce().remove();		},	});	// return item	return item;};/**  * (Columns) Columns  */mgDialogFieldControls.columns = function(controller, item, params, index) {	// create params	var that = this, params = $.extend({}, {margins:false, distance: 0, columns: false}, params);	// create item	item.addClass("columns");	// set item margin	if(params.margins) {		var margins = $.extend({}, {top:0, left:0, right: 0, bottom:0}, params.margins);		item.css({"margin-left":margins.left,"margin-top":margins.top,"margin-right":margins.right,"margin-bottom":margins.bottom});	}	// create columns	var columns = params.columns?params.columns:[], 		sortablecount = 0, 		adjustedwidth = (columns.length * 5) + ((columns.length-1) * params.distance), 		adjustedcount = 0;	$.each(columns, function(index, column) {		if(column.width&&column.width!="auto") {			adjustedwidth += parseInt(column.width);			adjustedcount += 1;		} 		// adjust sortable		if(params.alwayssortable) {			column.sortable = true		}		// count sort		if(column.sortable) {			sortablecount += 1;		}	});	// get autowidth	try {		var maxsize = controller.parentoptions.parentwidth - (params.fitalign?100:0),			autowidth = Math.round((maxsize - adjustedwidth) / (columns.length - adjustedcount));	} catch(e) {		var autowidth = 0;	}	// assign autowidth and create columns	$.each(columns, function(index, column){		// prepare column		columns[index] = $.extend({}, {shortlabel: false, readonly: false, disabled: false, width: false, fields: false}, column);		// create autowidth		if(!columns[index].width||columns[index].width=="auto") {			columns[index].width = autowidth;		}		// set other		columns[index].width = parseInt(columns[index].width);		// add column to header		var ch = $("<div></div>").addClass("column").css({width: columns[index].width}).appendTo(item);		// prepare fields		for(var i=0;i<column.fields.length;i++) {			column.fields[i] = $.extend({}, {shortlabel: columns[index].shortlabel, readonly: columns[index].readonly, disabled: columns[index].disabled}, column.fields[i]);		}		// create fields		var fd = mgCreateDialogFields(column.fields, {			scrollable: false, 			padding:0,			parentwidth: columns[index].width,			parentheight: 'auto',			onwritestorage: function(name, value) {				controller.writestorage(name, value);			},			onreadstorage: function(name) {				return controller.readstorage(name);			}		});		// add fields		ch.append(fd);		// add divider		if(index < params.columns.length -1) {			item.append($("<div></div>").addClass("distance").css({width: params.distance}));		}	});	// add clear	item.append(mgClear());	// return item	return item;};/**  * (Picture) Picture Upload  */mgDialogFieldControls.picture = function(controller, item, params, index) {	// initialize parent	var parent = this;	// set limits	var limit = 1024 * 1024 * 2; // 2MB file limit	// create params	var params = $.extend({}, {shortlabel: false, parameters: false, uploadurl: false, previewwidth: 230, previewheight: 190, previewurl: false, display: true, storage: false, status: false, label: false}, params); 	// create label	item.append($("<span></span>").disableSelection().addClass("label").mgDialogFontStyle(params.style).html(params.label));	// add buttons	var uploadbutton = this.button(controller, $("<div></div>"), {label:'{%ButtonUploadPicture}'}).appendTo(item),		clearbutton = this.button(controller, $("<div></div>"), {label:'{%ButtonClearPicture}', action: function() {			params.status = false;			params.picture = false;			item.trigger('updatecontrol');		}}).appendTo(item);	// create image preview area	var imagearea = $("<div></div>").css({display:'none', 'margin-left':params.shortlabel?80:123, width:params.previewwidth, height:params.previewheight, border:'1px solid #d7d7d7'}).appendTo(item);	// read storage snippet	params.status = params.storage?controller.readstorage(params.storage):params.status;	// validate params	if(typeof(params.status)=="string"){params.status = params.status=="true"?true:false;}	// assign button actions	uploadbutton.selectfile({		accept: 'image/png,image/jpg,image/jpeg,image/pjpeg',		maxsize: limit, 		success: function(filedata) {			// prepare progressbar			var progressbar = mgCreateProgressBar(item, {width:230,inset:153, max:filedata.size});			// start upload			mgUploadBase64File(params.uploadurl, "picture", filedata.data, {				onprogress: function(position, total) {					progressbar.position(position);				},				oncomplete: function(result, event) {					progressbar.remove();					params.status = true;					item.trigger('updatecontrol');				},				onerror: function(error) {					alert(error);				}			});		},		failed: function(error, filedata) {			switch(error) {				case "mime": var msg = sprintf('{%PictureUploadErrorMime}<br/><br/>{%PictureUploadErrorMimeHint}', filedata.type); break;				case "size": var msg = sprintf('{%PictureUploadErrorSize}', mgBytesToSize(limit), mgBytesToSize(filedata.size)); break;				default: var msg="{%FileUploadError}"; break;			}			mgMessageDialog("{%PictureUploadErrorTitle}", msg);		}	});			// bind events	item.bind({			'updatecontrol': function(e) {			// write storage			if(params.storage) {controller.writestorage(params.storage, params.status);}			// prepare status			switch(params.status) {				case true: 					/* assign image */					imagearea.find("img").remove();					var img = new Image();					img.onload = function() {						if(params.display) {							imagearea.show();						}					}					img.src = mgCreateURL(params.previewurl, $.extend({}, {nocache: mgUniqueId()}, params.parameters));					img.width = params.previewwidth;					img.height = params.previewheight;					imagearea.append(img);					uploadbutton.hide(); 					clearbutton.show().css("display", "inline-block"); 										break;				default: 					uploadbutton.show().css("display", "inline-block"); 					clearbutton.hide(); 					imagearea.hide();					break;			}		}	});	item.trigger('updatecontrol');	// return item	return item.addClass("input");};	/**  * (assetlist) Asset List  */mgDialogFieldControls.assetlist = function(controller, item, params, index) {	// initialize parent	var parent = this;	// create params	var params = $.extend({}, {assets: false, category: false, imagebrowser: false, thumbnailsize: 120, events: {}}, params);		// add class	item.addClass("assetlist");	// initialize assets	var assets = false;	// create surface	if(params.imagebrowser) {		// sort by filename		item.addClass("imagebrowser").bind('update', function(ev) {			item.html("");			if(assets&&assets.length) {				$.each(mgSortObjectArray(assets, 'filename', true), function(index, a) {					// create image					var img = $("<div></div>").addClass("item -corner-all-small").disableSelection('pointer').appendTo(item);					// create image itself					img.append($("<img/>").addClass("-corner-all-small").attr({src:sprintf("%s?crop=%sx%s", a.url, params.thumbnailsize, params.thumbnailsize)}));					// add meta					var dt = $("<div></div>").addClass("info").appendTo(img);					// add info					dt.append($("<span></span>").append(mgCutFileString(a.filename, 20)));					dt.append(sprintf("%sx%s", a.width, a.height));					// add event					img.bind("click touchend", function() {						if(typeof(params.events.ondoubleclick)=="function") {							params.events.ondoubleclick(a);						}					});				});			}			item.append(mgClear());		});	} else {		// create grid		var item = mgDialogFieldControls.grid(controller, item, {			columns: [				{label: '{%ASGColumnFilename}', field: 'filename'},				{label: '{%ASGColumnTypeName}', field: 'filetypename', width: 120},				{label: '{%ASGColumnSize}', field: 'filesize', width: 80}			],			fitalign: true,			height: 14,			controlactions: {add: true, remove: true, search: false, pager: true},			alwayssortable: true, 			events: {				onvalues: function(page, itemsperpage, sort, sortmode) {					return assets?mgSortObjectArray(assets, sort, sortmode=="a"?true:false):[];				},				onrowdoubleclick: function(item, grid) {					if(typeof(params.events.ondoubleclick)=="function") {						params.events.ondoubleclick(item, grid);					}				},				oncellformat: function(column, value, item) {					switch(column.field) {						case "filesize": return mgBytesToSize(parseInt(value)); break;					}				},				onadd: function(grid) {					if(typeof(params.events.onadd)=="function") {						params.events.onadd(item, grid);					}				},				ondelete: function(items, grid) {					if(typeof(params.events.ondelete)=="function") {						var deleteids = {};						$.each(items, function(index, im){deleteids[im.idstring]=im.filename});						params.events.ondelete(deleteids, item, grid);											}				}			}		}, index);			}	// process	item.bind("updateassets", function(ev, data) {		// get category		if(params.category === false) {			assets = [];			$.each(data, function(index, cat) {				$.each(cat, function(i, ix) {					assets.push(ix);				});			});		} else {			assets = data[params.category]?data[params.category]:false;		}		// check 		item.trigger("update");	});	// trigger	if(params.assets) {		item.trigger('updateassets', [params.assets]);	}	// return item;	return item;};/**  * (Picture) Asset Item  */mgDialogFieldControls.asset = function(controller, item, params, index) {	// initialize parent	var parent = this;	// set limits	var limit = 1024 * 1024 * 2; // 2MB file limit	// create params	var params = $.extend({}, {dialog: {}, custombutton: false, custombuttonaction: false, shortlabel: false, previewwidth: 230, previewheight: 190, previewclass: false, preview: false, previewcrop: false, storage: false, label: false, margins:false}, params); 	// create label	item.append($("<span></span>").disableSelection().addClass("label").addClass(params.shortlabel?"short":"").mgDialogFontStyle(params.style).html(params.label));	// margin	if(params.margins) {		if(params.margins.top) {			item.css("margin-top", params.margins.top);		}	}	// read storage snippet	var asset = params.storage?controller.readstorage(params.storage):false;	 	// add buttons	var selectbutton = this.button(controller, $("<div></div>"), {label:'{%ButtonSelect}', action: function() {		// run dialog		var wnd = mgCreateAssetDialog($.extend({}, params.dialog, {picker: true}), function(na) {			// write storage			if(params.storage) {				controller.writestorage(params.storage, na);			}			// update asset			asset = na;			item.trigger("updatecontrol");		});	}}).appendTo(item),		clearbutton = this.button(controller, $("<div></div>"), {label:'{%ButtonRemove}', action: function() {			if(params.storage) {				controller.writestorage(params.storage, false);			}			asset = false;			item.trigger('updatecontrol');		}}).appendTo(item);	// custom button	if(params.custombutton) {		this.button(controller, $("<div></div>"), {label:params.custombutton, distance: true, action: function() {			if(typeof(params.custombuttonaction)=="function") {				params.custombuttonaction(item, asset);			}		}}).appendTo(item);	}	// create image preview area		var previewarea = $("<div></div>").css({display:'none', 'margin-left':params.shortlabel?85:123}).addClass(params.previewclass?params.previewclass:false).appendTo(item);	// bind events	item.bind({			'updatecontrol': function(e, as) {			// reassign			if(as) asset = as;			// clean up			previewarea.html("");			previewarea.hide();			selectbutton.show();			selectbutton.css("display", "inline-block");			clearbutton.hide();			// prepare status			if(typeof(asset)=="object") {				switch(asset.filetype) {					case "image": 						previewarea.append($("<img/>").attr("src", sprintf("%s?%s%s=%sx%s", asset.url, asset.crop?sprintf("croprect=%s&", asset.crop.rect):"", params.previewcrop?"autocrop":"resize", params.previewwidth, params.previewheight)));						break;					default:						previearea.append(sprintf("<strong>%s</strong>",  asset.filename));						break;				}				selectbutton.hide();				previewarea.show();				clearbutton.show();				clearbutton.css("display", "inline-block");						}		},		'after': function(e) {			$(this).trigger("updatecontrol");		}		});	item.trigger('updatecontrol');	// return item	return item.addClass("input");};	/**  * (Logic) Defines a logic container  */mgDialogFieldControls.logic = function(controller, item, params, index) {	// create params	var hasfinal = false, params = $.extend({}, {id: false, trigger: false, conditions: []}, params); 	// bind logic event	item.bind({		'update': function() {			// clear			var target = $(this);			target.html("");			// cycle conditions			$.each(params.conditions, function(index, c) {				var c = $.extend({}, {condition: false, isfinal: true, fields: []}, c);				// check condition				if(typeof(c.condition)=="function") {					c.condition = c.condition();				}				// test condition				if(c.condition===true) {					target.append(mgCreateDialogFields(c.fields, {						scrollable: false, 						padding:0,						parentwidth: controller.parentoptions.parentwidth,						parentheight: 'auto',						onwritestorage: function(name, value) {							controller.writestorage(name, value);						},						onreadstorage: function(name) {							return controller.readstorage(name);						}					}));										// break;					if(c.isfinal) {						return false;					}				};			});		},		'after': function() {			item.trigger("update");				}	});	// add id	if(params.id) {item.attr("id", params.id);}		// check	if(params.trigger) {item.trigger("update");}	// return item	return item;};/**  * (Storage) Dummy Control to store a specific value in the storage  */mgDialogFieldControls.storage = function(controller, item, params, index) {	// create params	var params = $.extend({}, {storage: false, value: false}, params); 	if(params.storage) {		controller.writestorage(params.storage, value);	};	return false;};/**  * (BusinessHours) Business Hours  */mgDialogFieldControls.businesshours = function(controller, item, params, index) {	// initialize parent	var parent = this;	// create params	var params = $.extend({}, {storage: false, labelwidth: false, closedtext: 'Closed', shortlabel:false, label:false, shortdays: false, hours: 2, ampm: true}, params); 	// read storage	var data = params.storage?controller.readstorage(params.storage):false;	if(!data) {		data = {			times: []		};	}	// create label	if(params.label) {		item.append($("<span></span>").disableSelection().addClass("label").addClass(params.shortlabel?"short":"").css(params.labelwidth?{width: params.labelwidth}:{}).mgDialogFontStyle(params.style).html(params.label));	}	// create data	var shortDays = [{%LocalizedDayAbbreviations}],		longDays = [{%LocalizedDayNames}],		timenames = {};	// create control	var control = $("<div></div>").addClass("container -corner-all-small").appendTo(item);	// create select container 	var sc = $("<select></select>");	for(var i=0;i<24;i++) {		// create hour		var h = i, pm = false;		// adjust		if(params.ampm) {			if(h==0) {				h = 12;			} else if(h==12) {				pm = true;			} else if (h>12) {				pm = true;				h-=12;			}		}		// create content		var d = Math.round(60 / params.hours);		// create content		for(var x=0;x<params.hours;x++) {			if(x == 0) {				var s = sprintf("%s:00", h), 					v = i;			} else {				var s = sprintf("%s:%s", h, (x*d)), 					v = sprintf("%s:%s", i, (x*d));			}			// add am pm			s += params.ampm?sprintf(" %s", pm?"pm":"am"):"";			// add 			sc.append($("<option></option>").attr({value: v}).append(s));			// add to times			timenames[v] = s;		}	}	// create lines	$.each(params.shortdays?shortDays:longDays, function(index, day) {		var cl = $("<div></div>").addClass("cl").appendTo(control);		cl.append($("<input/>").attr({type:'hidden', rel:sprintf("dm%s", index), value: 1}));		cl.append($("<span></span>").data("index", index).disableSelection('pointer').addClass("l h").append(day).dblclick(function() {			// apply current to all			var i = parseInt($(this).data("index")),				p = $(this).parent(),				dm = p.find(".chk").is(":checked"),				dsv = p.find(sprintf("[rel=ds%s]", i)).val(),				dev = p.find(sprintf("[rel=de%s]", i)).val();			// add			p.parent().find(".chk").each(function() {				var r = parseInt($(this).attr("rel"));				if(r!=i) {					if(dm) {						$(this).attr("checked", "checked");					} else {						$(this).removeAttr("checked");					}					$(this).trigger("updatecheckbox");				}			});			// apply to all			$.each(shortDays, function(ix, dl) {				if(ix!=i) {					if(dm) {											} else {										}					p.parent().find(sprintf("[rel=ds%s]", ix)).val(dsv);					p.parent().find(sprintf("[rel=de%s]", ix)).val(dev);				}			});			// update			item.trigger("change");		}));		cl.append(sc.clone().attr({rel:sprintf("ds%s", index)}).val(data.times[index]?data.times[index].start:false).bind('change', function(){item.trigger('change')}));		cl.append(sc.clone().attr({rel:sprintf("de%s", index)}).val(data.times[index]?data.times[index].end:false).bind('change', function(){item.trigger('change')}));		cl.append($("<span></span>").addClass("c").append($("<input/>").addClass("chk").attr({rel: index, type:'checkbox'}).bind({			'click': function() {				$(this).trigger("updatecheckbox");			},			'updatecheckbox': function() {				var b = $(this).is(":checked"), rid = $(this).attr("rel");				if(b){$(this).parent().addClass("a")}else{$(this).parent().removeClass("a")};				item.find(sprintf("input[rel=dm%s]", rid)).val(b?0:1);				$.each(['ds', 'de'], function(p, id) {					var t = item.find(sprintf("select[rel=%s%s]", id, rid));					if(b) {						t.attr('disabled', 'disabled');					} else {						t.removeAttr('disabled');					}				});				item.trigger('change');			}		})).append(params.closedtext));		if(data.times[index]&&data.times[index].mode==0) {			cl.find("[type=checkbox]").attr("checked", "checked").click();		}	});	// events	item.bind({		change: function() {			var that = $(this), data = {				names: longDays,				shortnames: shortDays,				timenames: timenames,				times: []			};			$.each(data.names, function(index, i) {				data.times.push({					mode: that.find(sprintf("[rel=dm%s]", index)).val(),					start: that.find(sprintf("[rel=ds%s]", index)).val(),					end: that.find(sprintf("[rel=de%s]", index)).val()				});			});			if(params.storage) {				controller.writestorage(params.storage, data);			}		}	});	// return item	return item.addClass("input businesshours");};	/**  * (Hours)   */mgDialogFieldControls.hours = function(controller, item, params, index) {	// initialize parent	var parent = this;	// create params	var params = $.extend({}, {storage: false, allday: true, shortlabel:false, label:false, modeoptions: ['Not set', 'All Day', 'Open End', 'Range'], hours: 2, ampm: true}, params); 	// read storage	var data = params.storage?controller.readstorage(params.storage):false;	if(!data) {		data = {			mode: 0,			start: 0,			end: 0		};	}	// create label	if(params.label) {		item.append($("<span></span>").disableSelection().addClass("label").addClass(params.shortlabel?"short":"").mgDialogFontStyle(params.style).html(params.label));	}	// create data	var timenames = {};	// create control	var control = $("<div></div>").addClass("container -corner-all-small").appendTo(item);	// create select container 	var sc = $("<select></select>");	for(var i=0;i<24;i++) {		// create hour		var h = i, pm = false;		// adjust		if(params.ampm) {			if(h==0) {				h = 12;			} else if(h==12) {				pm = true;			} else if (h>12) {				pm = true;				h-=12;			}		}		// create content		var d = Math.round(60 / params.hours);		// create content		for(var x=0;x<params.hours;x++) {			if(x == 0) {				var s = sprintf("%s:00", h), 					v = i;			} else {				var s = sprintf("%s:%s", h, (x*d)), 					v = sprintf("%s:%s", i, (x*d));			}			// add am pm			s += params.ampm?sprintf(" %s", pm?"pm":"am"):"";			// add 			sc.append($("<option></option>").attr({value: v}).append(s));			// add to times			timenames[v] = s;		}	}	// create content	var cl = $("<div></div>").addClass("cl").appendTo(control);	// create mode options	var ms = $("<select></select>").addClass("-corner-all-small").attr({rel:"dm"}).bind('change', function(e, init){		var m = $(this).val(), b = false, df = {ds: true, de: true};		switch(parseInt(m)) {			case 2: df.ds = false; break;			case 3: b = true; break;			default:  break;		}		$.each(df, function(id, s) {			var t = item.find(sprintf("select[rel=%s]", id));			if(!b&&s) {				t.attr('disabled', 'disabled');			} else {				t.removeAttr('disabled');			}		});		if(!init)  {			item.trigger('change');		}	}).appendTo(cl);	$.each(params.modeoptions, function(ix, name) {		ms.append($("<option></option>").attr("value", ix).html(name));	});	// add start / end	cl.append(sc.clone().attr({rel:"ds"}).addClass("-corner-left-small").val(data.start?data.start:false).bind('change', function(){item.trigger('change')}));	cl.append(sc.clone().attr({rel:"de"}).addClass("-corner-right-small").val(data.end?data.end:false).bind('change', function(){item.trigger('change')}));	// add all day	ms.val(data.mode?data.mode:0).trigger('change', [true]);	// events	item.bind({		change: function() {			var data = {				timenames: timenames,				mode: ms.val(),				start: $(this).find("[rel=ds]").val(),				end: $(this).find("[rel=de]").val()			};			if(params.storage) {				controller.writestorage(params.storage, data);			}		}	});	// return item	return item.addClass("input moderange");};/**  * (ModeRange)   */mgDialogFieldControls.moderange = function(controller, item, params, index) {	// initialize parent	var parent = this;	// create params	var params = $.extend({}, {storage: false, labelwidth: false, shortlabel:false, label:false, modes: false, ranges: false, logic: false}, params); 	// read storage	var data = params.storage?controller.readstorage(params.storage):false;	if(!data) {		var data = {			mode: 0,			start: 0,			end: 0		};	}	// create select container 	var sc = $("<select></select>");	$.each(params.ranges, function(index, name) {		sc.append($("<option></option>").attr({value: index}).append(name));	});	// create label	if(params.label) {		item.append($("<span></span>").disableSelection().addClass("label").addClass(params.shortlabel?"short":"").css(params.labelwidth?{width: params.labelwidth}:{}).mgDialogFontStyle(params.style).html(params.label));	}	// create control	var control = $("<div></div>").addClass("container -corner-all-small").appendTo(item);	// create content	var cl = $("<div></div>").addClass("cl").appendTo(control);	// create mode options	var ms = $("<select></select>").addClass("-corner-all-small").attr({rel:"dm"}).bind('change', function(e, init){		var m = $(this).val(), b = false, df = {ds: true, de: true};		if(typeof(params.logic)=="function") {			var r = params.logic(m);			if(r===false) {				df.ds = false; df.de = false;			} else if(mgIsArray(r)) {				df.ds = r[0];				df.de = r[1];			}		};				$.each(df, function(id, s) {			var t = item.find(sprintf("select[rel=%s]", id));			if(!s) {				t.attr('disabled', 'disabled');			} else {				t.removeAttr('disabled');			}		});		if(!init)  {			item.trigger('change');		}	}).appendTo(cl);	$.each(params.modes, function(ix, name) {		ms.append($("<option></option>").attr("value", ix).html(name));	});	// add start / end	cl.append(sc.clone().attr({rel:"ds"}).addClass("-corner-left-small").val(data.start?data.start:false).bind('change', function(){item.trigger('change')}));	cl.append(sc.clone().attr({rel:"de"}).addClass("-corner-right-small").val(data.end?data.end:false).bind('change', function(){item.trigger('change')}));	// add all day	ms.val(data.mode?data.mode:0).trigger('change', [true]);	// events	item.bind({		change: function() {			var data = {				ranges: params.ranges,				mode: ms.val(),				start: $(this).find("[rel=ds]").val(),				end: $(this).find("[rel=de]").val()			};			if(params.storage) {				controller.writestorage(params.storage, data);			}		}	});	// return item	return item.addClass("input moderange");};/**  * (Hours)   */mgDialogFieldControls.phone = function(controller, item, params, index) {	// create params	var params = $.extend({}, {withextension: true, mask: '999-999-9999', size: 18}, params); 	// build control options	// create input	var input = this.inputcontrol(controller, $("<div></div>"), $.extend({}, params, params.withextension?{withtext:'&nbsp;Extension&nbsp;&nbsp;&nbsp;'}:{}), -1, 'input');	// create extension	if(params.withextension) {		this.inputcontrol(controller, input, {shortlabel: true, storage: params.storage?params.storage+'ext':false, size:12, isnumeric: true}, -1, 'input');	}	// add item	item.append(input)	// return item	return item;};/**  * (Form)  */mgDialogFieldControls.form = function(controller, item, params, index) {	// create params	var that = this, params = $.extend({}, {allowpartial: false, fixed: false, height: false, locked: false, validate: true, dialog: $.extend({}, {title: false, message:false, blocker: true, labelnames: true}, params.dialog), validation: {dialog: true}, id: false, values: false, buttonsclass: false, buttons: false, classes: false, fields: false, storage:false}, params);	// add html id	if(params.id) item.attr("id", params.id);	// add fixed	if(params.fixed) {		item.css({overflow:"hidden", "overflow-y":"scroll", height: params.height});	}	// get values	var values = params.values?params.values:(params.storage?controller.readstorage(params.storage):{});	// prepare fields	$.each(params.fields, function(index, f) {		if(f.hidelock) {			params.fields[index].classes = sprintf("%s hidelock", f.classes?f.classes:"");		}		f = params.fields[index]; 		if(f.showlock) {			params.fields[index].classes = sprintf("%s showlock", f.classes?f.classes:"");		}	});	// create fields	var fd = mgCreateDialogFields(params.fields, {		scrollable: false, 		padding:0,		parentwidth: controller.parentoptions.parentwidth + controller.parentoptions.parentwidthadjusted - (params.fixed?20:0),		parentheight: 'auto',		onwritestorage: function(name, value) {			values[name] = value;			if(params.storage) {				controller.writestorage(params.storage, values);			}			$(that).data("values", values);		},		onreadstorage: function(name) {			return values[name]?values[name]:"";		}	});	item.append(fd);	// add buttons	var btn = $("<div></div>").addClass(params.buttonsclass).appendTo(item);	if(params.buttons) {		$.each(params.buttons, function(index, button) {			if(button.type == "custom") {				var button = $.extend({}, {showlock: false, hidelock: false, action: false, classes: false, label:false, distance: false}, button);				btn.append($("<button></button>").addClass(button.showlock?"showlock":false).addClass(button.hidelock?"hidelock":false).addClass(button.classes).css($.extend({}, button.distance?{'margin-left': button.distance}:{})).append(button.label).click(function() {					item.trigger('action', [button.action]);				}));			} else {				btn.append(that.button(controller, $("<div></div>"), {icon: button.icon, action: function(){item.trigger("action", [button.action])}, label: button.label, distance: button.distance}, -1));			}		});			}	if(btn.children().length==0) {		btn.hide();	} else {		if(btn.children().length==1) btn.addClass("hidelock");	}	// events	item.bind({		after: function() {			$(this).trigger("show");		},		show: function() {				if(typeof(params.events.onshow)=="function") {				params.events.onshow(values, item);			}			if(params.locked) $(this).trigger("lock");		},			lock: function() {			$(this).find("input,select,textarea").each(function() {				$(this).addClass("locked").attr("disabled", "disabled");			});			$(this).find(".hidelock").hide();			$(this).find(".showlock").show();			btn.addClass("locked");			params.locked = true;		},		unlock: function() {			$(this).find("input,select,textarea").each(function() {				$(this).removeClass("locked").removeAttr("disabled");			});			$(this).find(".hidelock").show();			$(this).find(".showlock").hide();			btn.removeClass("inlocked");			params.locked = false;		},		action: function(ev, action) {			if(typeof(action)=="function") {				action(item);			} else {				switch(action) {					case "lock":						$(this).trigger("lock");						break;					case "unlock":						$(this).trigger("unlock");						break;					case "submit":						if(params.locked) return;						var r = true, success = function() {							if(typeof(params.events.onsubmit)=="function") {								params.events.onsubmit(values);								}						};						if(params.validate) {							r = $(this).trigger('validate', [success]);													} else {							success();						}						break;					case "save":						if(params.locked) return;						var r = true, success = function() {							if(typeof(params.events.onsubmit)=="function") {								params.events.onsubmit(values);								}						};						if(params.validate) {							r = $(this).trigger('validate', [success]);													} else {							success();						}						break;				}			}		},		validate: function(ev, cb) {			var violations = [];			$(this).find("input,select").each(function() {				var d = $(this).parent().data("params");				if(d) {					var v = null, r = false;					switch(d.type) {						case "input": case "combo": case "text":							v = $(this).val()							break;					};					if(v!=null) {							switch(d.validate?d.validate:false) {							case VALIDATE_EMAIL: r = mgIsEMail(v); break;							case VALIDATE_NUMERIC: r = mgIsNumeric(v); break;							case VALIDATE_PHONE: r = mgIsPhone(v); break;							case VALIDATE_CUSTOM: 							case VALIDATE_NONE: r = true; break;							default: r = v!="";						}						if(!r) {							violations.push({								name: d.storage,								label: d.validatelabel?d.validatelabel:d.label,								validate: d.validate							});						}					}				}			});			if(typeof(params.events.oncustomvalidation)=="function") {				var r = params.events.oncustomvalidation(item);				if(mgIsArray(r)) {					violations = violations.concat(r);				}			}			if(violations.length!=0){				var r = false;				if(typeof(params.events.onviolation)=="function") {					var r = params.events.onviolation(violations, values, item);				}				if(!r) {					var d = false, th = $(this), td = function() {						if(params.validation.dialog) {							th.trigger("dialog", [violations]);						}					};					if(params.allowpartial && typeof(params.events.onpartial)=="function") {						var d = params.events.onpartial(violations, values, item, td, cb);					}					if(!d) td();				}			} else {				cb();			}		},		dialog: function(ev, violations) {					if(!mgIsArray(violations)||violations.length==0) return;			var text = "";			$.each(violations, function(i, v) {				var f = params.dialog.labelnames?v.label:v.name;				if(f) {					f = f.replace("*", "");				}				var t = false;				switch(v.validate) {					case VALIDATE_EMAIL: t = sprintf("%s needs to have a valid E-Mail Address.", f); break; 					case VALIDATE_NUMERIC: t = sprintf("%s can only have numbers.", f); break;					case VALIDATE_PHONE: t = sprintf("%s needs to have a valid Phone Number.", f); break;					case VALIDATE_CUSTOM: t = v.text; break;					default: t = sprintf("%s needs to be completed.", f); break;				}				if(t) {					text += "<div>"+t+"</div>";				}			});						mgCreateMessageDialog({				header: params.dialog.title,				blocker: params.dialog.blocker,				height: 280,				position:'topcenter',				offset: {top: 10},				message:params.dialog.message, 				fields: [					{type:'label', classes: params.dialog.textclasses, height: 150, scrolling: true, text:text}				],				buttons:typeof(buttons)=="object"?buttons:{'{%ButtonClose}': typeof(callback)=="function"},				events: $.extend({}, typeof(callback)=="function"?{onsuccess:callback}:{})			});		}	});	// lock	if(params.locked) item.trigger("lock");	// return item	return item;};/**  * (History)  */mgDialogFieldControls.history = function(controller, item, params, index) {	var params = $.extend({}, {fitalign: false, height: 14, list: false, events: false}, params);	// check	if(!mgIsArray(params.list)) params.list = [];		var item = mgDialogFieldControls.grid(controller, item, {		sortasc: true,		columns: [			{label: '{%HistoryColumnDate}', field: 'date', sortfield:'stamp', width: 80},			{label: '{%HistoryColumnTime}', field: 'time', sortfield:'stamp', width: 80},			{label: '{%HistoryColumnName}', field: 'name', width: 150},			{label: '{%HistoryColumnDescription}', field: 'description', width: false},		],		fitalign: params.fitalign,		height: params.height,		controlactions: {add: false, remove: false, search: true, pager: true},		alwayssortable: true, 		events: {			onvalues: function(page, itemsperpage, sort, sortmode) {				return params.list?mgSortObjectArray(params.list, sort, sortmode=="a"?true:false):[];			},			onrowdoubleclick: function(item, grid) {				if(typeof(params.events.ondoubleclick)=="function") {					params.events.ondoubleclick(item, grid);				} else {					mgCreateHistoryItemDialog(item);				}			},			oncellformat: function(column, value, item) {						},		}	}, index);		return item;};/**  * (Fields)  */mgDialogFieldControls.fields = function(controller, item, params, index) {	// settings	var params = $.extend({}, {classname: false, fixed: false, fields: false}, params);	// get fields	var fields = typeof(params.fields)=="function"?params.fields():params.fields;	// // create fields	var fd = mgCreateDialogFields(fields, {		scrollable: false, 		padding:0,		parentwidth: controller.parentoptions.parentwidth + controller.parentoptions.parentwidthadjusted,		parentheight: 'auto',		onwritestorage: function(name, value) {			values[name] = value;			if(params.storage) {				controller.writestorage(params.storage, values);			}			$(that).data("values", values);		},		onreadstorage: function(name) {			return values[name]?values[name]:"";		}	});	item.append(fd);	return item;};/**  * (controlbar)  */mgDialogFieldControls.controlbar = function(controller, item, params, index) {	var that = this;	// settings	var params = $.extend({}, {actions: [], cornerclass: "", text: "", id: "", itemsperpage: 10, itemsperpageoptions: [], controlbar: false, events: {}}, params);	// modify item	item.addClass("input").bind(params.events);	// create controlbar	var controlbar = $("<div></div>").addClass("controlbar").addClass(params.cornerclass).appendTo(item);	// create actions	$.each(params.actions, function(index, cparams) {		switch(cparams.type) {			case "button": $("<div></div>").attr("rel", cparams.related).addClass("controlbutton -corner-all-small").css("background-image", sprintf("url(/resources/dialogs/images/dialog-icon-%s.png)", cparams.related)).click(cparams.action).appendTo(controlbar); break;			case "search": $("<input/>").attr("id", cparams.id).css(cparams.css?cparams.css:false).addClass("search -corner-all-small").change(cparams.action).keyup(cparams.keyup?cparams.keyup:false).css({width: cparams.width}).val(cparams.value).appendTo(controlbar); break;			case "divider": $("<div></div>").addClass("divider").appendTo(controlbar); break;			case "text": $("<div></div>").attr("id", cparams.id).addClass("text").disableSelection().html(cparams.text).appendTo(controlbar); break;			case "pager":				var itemsperpage = params.itemsperpage;				var pager = $("<div></div>").addClass("pager").appendTo(controlbar);				var ipp = params.itemsperpageoptions.indexOf(itemsperpage), ipp = ipp!=-1?ipp:0;				pager.append(that.combo(controller, $("<div></div>").addClass("ctl"), {label:'Rows', labelwidth: 30, select: ipp, options:params.itemsperpageoptions, callback: function(v) {					itemsperpage = params.itemsperpageoptions[v];					item.trigger('update');				}}, -1));				pager.append(that.input(controller, $("<div></div>").addClass("ctl pageinput"), {label:'Go to', labelwidth: 30, size: 2, callback: function(v) {					if(!isNaN(parseInt(v))) {						currentpage = parseInt(v);						item.trigger('update');					}				}}));				pager.append($("<div></div>").addClass("pagerlabel").disableSelection().html("&nbsp;"));				$("<div></div>").addClass("controlbutton -corner-all-small").css("background-image", "url(/resources/dialogs/images/dialog-icon-prev.png").click(function() {					item.trigger('prevpage');				}).appendTo(pager);				$("<div></div>").addClass("controlbutton -corner-all-small").css("background-image", "url(/resources/dialogs/images/dialog-icon-next.png").click(function() {					item.trigger('nextpage');				}).appendTo(pager);				break;			}	});	// return 	return item;};					