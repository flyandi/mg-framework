/**  * (mg)framework Version 5.0  *	Copyright (c) 1999-2011 eikonlexis LLC. All rights reserved.  *  * This program is protected by copyright laws and international treaties.  * Unauthorized reproduction or distribution of this program, or any   * portion thereof, may result in serious civil and criminal penalties.  *  * Module 		Dialog CRM Controls  */ /**  * (crmheader)  */mgDialogFieldControls.crmheader = function(controller, item, params, index) {	// create params	var params = $.extend({}, {small: false, header:false, subheader: false, icon: false}, params); 	// prepare item	item.addClass("crmheader").addClass(params.small?"small":"").disableSelection(); 	// add icon	if(params.icon) {		item.append($("<div></div>").addClass("icon").mgIconize(params.icon));	}	// add header	var header = $("<div></div>").addClass("header").appendTo(item);	// add subheader	if(params.subheader) {header.append($("<span></span>").append(controller.formatstring(params.subheader)));}	if(params.header) {header.append(controller.formatstring(params.header));}	// finalize	item.append(mgClear());	// return item	return item;};/**  * (crmsections)  */mgDialogFieldControls.crmsections = function(controller, item, params, index) {	// create params	var params = $.extend({}, {sections: {}, scrollbar: true, hideempty: true, showheaders: true, sectionmargin: -1, fixed: false, height: 'auto', collapsable: false}, params); 	// prepare item	item.addClass("crmsections"); 	// prepare	var sections = $("<div></div>").addClass("crmsections");	// prepare sections	if(params.fixed) {		item.append($("<div></div>").addClass("crmsectionscroller").addClass(params.scrollbar?'scrolling':false).css({height: params.height}).append(sections));	} else {		item.append(sections);	}	// cycle sections	$.each(params.sections, function(title, fields) {		var section = $("<div></div>").addClass("crmsection").appendTo(sections);			// add section header			sheader = !params.showheaders?"":$("<div></div>").addClass("crmsectionheader").append(title).appendTo(section),			// add content area			scontent = $("<div></div>").addClass("crmsectioncontent").appendTo(section);		// adjust		if(params.sectionmargin>-1) {			section.css("margin-left", params.sectionmargin);		}		// create fields		scontent.append(mgCreateDialogFields(fields, {			scrollable: false, 			padding:0,			parentwidth: controller.parentoptions.parentwidth - 15 - (params.scrollbar?20:0),			parentheight: 'auto',			onwritestorage: function(name, value) {				controller.writestorage(name, value);			},			onreadstorage: function(name) {				return controller.readstorage(name);			}		}));		// check content		if(params.hideempty) {			if(scontent.children().length == 0) {				sheader.remove();				scontent.remove();			}		}			});	// return item	return item;};/**  * (crmstatusbar)  */mgDialogFieldControls.crmstatusbar = function(controller, item, params, index) {	// create params	var params = $.extend({}, {values: {}}, params); 	// prepare item	item.addClass("crmstatusbar"); 	// calculate width	var w = Math.round(controller.parentoptions.parentwidth / mgObjectCount(params.values)) - 5,		wl = Math.round(w*.3);	// cycle values	$.each(params.values, function(label, text) {		// process		if(typeof(text)=="function") {			var text = text();		}		// add		item.append($("<div></div>").css({width: w}).append($("<span></span>").append(label).css({width: wl})).append(text));	});		// finalize	item.append(mgClear());	// return item	return item;};